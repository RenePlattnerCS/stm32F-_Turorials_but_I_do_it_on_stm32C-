
9_GeneralTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000254  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000308  08000310  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000308  08000308  00001310  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000308  08000308  00001310  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000308  08000310  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000308  08000308  00001308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800030c  0800030c  0000130c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000310  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000310  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000648  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a4  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004d  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000db1  00000000  00000000  00001bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000dfe  00000000  00000000  0000299e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003fc39  00000000  00000000  0000379c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000433d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000bc  00000000  00000000  00043418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000434d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000000 	.word	0x20000000
 80000d4:	00000000 	.word	0x00000000
 80000d8:	080002f0 	.word	0x080002f0

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000004 	.word	0x20000004
 80000f8:	080002f0 	.word	0x080002f0

080000fc <main>:


int timestamp = 0;

int main(void)
{
 80000fc:	b580      	push	{r7, lr}
 80000fe:	af00      	add	r7, sp, #0


	tim1_output_compare();
 8000100:	f000 f812 	bl	8000128 <tim1_output_compare>
	tim3_pa6_input_capture();
 8000104:	f000 f862 	bl	80001cc <tim3_pa6_input_capture>

	while(1)
	{
		while(!(TIM3->SR & SR_CC1IF)){}
 8000108:	46c0      	nop			@ (mov r8, r8)
 800010a:	4b05      	ldr	r3, [pc, #20]	@ (8000120 <main+0x24>)
 800010c:	691b      	ldr	r3, [r3, #16]
 800010e:	2201      	movs	r2, #1
 8000110:	4013      	ands	r3, r2
 8000112:	d0fa      	beq.n	800010a <main+0xe>

		timestamp = TIM3->CCR1;
 8000114:	4b02      	ldr	r3, [pc, #8]	@ (8000120 <main+0x24>)
 8000116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000118:	001a      	movs	r2, r3
 800011a:	4b02      	ldr	r3, [pc, #8]	@ (8000124 <main+0x28>)
 800011c:	601a      	str	r2, [r3, #0]
		while(!(TIM3->SR & SR_CC1IF)){}
 800011e:	e7f3      	b.n	8000108 <main+0xc>
 8000120:	40000400 	.word	0x40000400
 8000124:	2000001c 	.word	0x2000001c

08000128 <tim1_output_compare>:

}


void tim1_output_compare(void)
{
 8000128:	b580      	push	{r7, lr}
 800012a:	af00      	add	r7, sp, #0

	RCC->IOPENR |= GPIOAEN;
 800012c:	4b22      	ldr	r3, [pc, #136]	@ (80001b8 <tim1_output_compare+0x90>)
 800012e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000130:	4b21      	ldr	r3, [pc, #132]	@ (80001b8 <tim1_output_compare+0x90>)
 8000132:	2101      	movs	r1, #1
 8000134:	430a      	orrs	r2, r1
 8000136:	635a      	str	r2, [r3, #52]	@ 0x34
	//PA5 to AF moder
	GPIOA->MODER &= ~(1U << 10);
 8000138:	23a0      	movs	r3, #160	@ 0xa0
 800013a:	05db      	lsls	r3, r3, #23
 800013c:	681a      	ldr	r2, [r3, #0]
 800013e:	23a0      	movs	r3, #160	@ 0xa0
 8000140:	05db      	lsls	r3, r3, #23
 8000142:	491e      	ldr	r1, [pc, #120]	@ (80001bc <tim1_output_compare+0x94>)
 8000144:	400a      	ands	r2, r1
 8000146:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 11);
 8000148:	23a0      	movs	r3, #160	@ 0xa0
 800014a:	05db      	lsls	r3, r3, #23
 800014c:	681a      	ldr	r2, [r3, #0]
 800014e:	23a0      	movs	r3, #160	@ 0xa0
 8000150:	05db      	lsls	r3, r3, #23
 8000152:	2180      	movs	r1, #128	@ 0x80
 8000154:	0109      	lsls	r1, r1, #4
 8000156:	430a      	orrs	r2, r1
 8000158:	601a      	str	r2, [r3, #0]



	//set PA5 to alternate function mode 5
	GPIOA->AFR[0] |= AFR5_TIM1_CH1;
 800015a:	23a0      	movs	r3, #160	@ 0xa0
 800015c:	05db      	lsls	r3, r3, #23
 800015e:	6a1a      	ldr	r2, [r3, #32]
 8000160:	23a0      	movs	r3, #160	@ 0xa0
 8000162:	05db      	lsls	r3, r3, #23
 8000164:	21a0      	movs	r1, #160	@ 0xa0
 8000166:	03c9      	lsls	r1, r1, #15
 8000168:	430a      	orrs	r2, r1
 800016a:	621a      	str	r2, [r3, #32]

	//enable clock to timer 1
	RCC->APBENR2 |= TIM1EN;
 800016c:	4b12      	ldr	r3, [pc, #72]	@ (80001b8 <tim1_output_compare+0x90>)
 800016e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000170:	4b11      	ldr	r3, [pc, #68]	@ (80001b8 <tim1_output_compare+0x90>)
 8000172:	2180      	movs	r1, #128	@ 0x80
 8000174:	0109      	lsls	r1, r1, #4
 8000176:	430a      	orrs	r2, r1
 8000178:	641a      	str	r2, [r3, #64]	@ 0x40

	//set prescaler
	TIM1->PSC = 1600 - 1;
 800017a:	4b11      	ldr	r3, [pc, #68]	@ (80001c0 <tim1_output_compare+0x98>)
 800017c:	4a11      	ldr	r2, [pc, #68]	@ (80001c4 <tim1_output_compare+0x9c>)
 800017e:	629a      	str	r2, [r3, #40]	@ 0x28


	// set auto reaload
	TIM1->ARR = 10000 -1;
 8000180:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <tim1_output_compare+0x98>)
 8000182:	4a11      	ldr	r2, [pc, #68]	@ (80001c8 <tim1_output_compare+0xa0>)
 8000184:	62da      	str	r2, [r3, #44]	@ 0x2c


	//set output compare to toggle mode
	TIM1->CCMR1 = OC_TOGGLE;
 8000186:	4b0e      	ldr	r3, [pc, #56]	@ (80001c0 <tim1_output_compare+0x98>)
 8000188:	2230      	movs	r2, #48	@ 0x30
 800018a:	619a      	str	r2, [r3, #24]


	//enable tim1 ch1 in compare mode
	TIM1->CCER |= CCER_OC_CC1E;
 800018c:	4b0c      	ldr	r3, [pc, #48]	@ (80001c0 <tim1_output_compare+0x98>)
 800018e:	6a1a      	ldr	r2, [r3, #32]
 8000190:	4b0b      	ldr	r3, [pc, #44]	@ (80001c0 <tim1_output_compare+0x98>)
 8000192:	2101      	movs	r1, #1
 8000194:	430a      	orrs	r2, r1
 8000196:	621a      	str	r2, [r3, #32]




	//clear counter
	TIM1->CNT = 0;
 8000198:	4b09      	ldr	r3, [pc, #36]	@ (80001c0 <tim1_output_compare+0x98>)
 800019a:	2200      	movs	r2, #0
 800019c:	625a      	str	r2, [r3, #36]	@ 0x24


	TIM1->CR1 = CR1_CEN;
 800019e:	4b08      	ldr	r3, [pc, #32]	@ (80001c0 <tim1_output_compare+0x98>)
 80001a0:	2201      	movs	r2, #1
 80001a2:	601a      	str	r2, [r3, #0]
	// main output enable (needed for TIM1 advanced timer)
	TIM1->BDTR |= TIM_BDTR_MOE;
 80001a4:	4b06      	ldr	r3, [pc, #24]	@ (80001c0 <tim1_output_compare+0x98>)
 80001a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80001a8:	4b05      	ldr	r3, [pc, #20]	@ (80001c0 <tim1_output_compare+0x98>)
 80001aa:	2180      	movs	r1, #128	@ 0x80
 80001ac:	0209      	lsls	r1, r1, #8
 80001ae:	430a      	orrs	r2, r1
 80001b0:	645a      	str	r2, [r3, #68]	@ 0x44

}
 80001b2:	46c0      	nop			@ (mov r8, r8)
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	40021000 	.word	0x40021000
 80001bc:	fffffbff 	.word	0xfffffbff
 80001c0:	40012c00 	.word	0x40012c00
 80001c4:	0000063f 	.word	0x0000063f
 80001c8:	0000270f 	.word	0x0000270f

080001cc <tim3_pa6_input_capture>:



void tim3_pa6_input_capture(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0

	RCC->IOPENR |= GPIOAEN;
 80001d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000240 <tim3_pa6_input_capture+0x74>)
 80001d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80001d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000240 <tim3_pa6_input_capture+0x74>)
 80001d6:	2101      	movs	r1, #1
 80001d8:	430a      	orrs	r2, r1
 80001da:	635a      	str	r2, [r3, #52]	@ 0x34
	//PA6 to AF moder
	GPIOA->MODER &= ~(1U << 12);
 80001dc:	23a0      	movs	r3, #160	@ 0xa0
 80001de:	05db      	lsls	r3, r3, #23
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	23a0      	movs	r3, #160	@ 0xa0
 80001e4:	05db      	lsls	r3, r3, #23
 80001e6:	4917      	ldr	r1, [pc, #92]	@ (8000244 <tim3_pa6_input_capture+0x78>)
 80001e8:	400a      	ands	r2, r1
 80001ea:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 13);
 80001ec:	23a0      	movs	r3, #160	@ 0xa0
 80001ee:	05db      	lsls	r3, r3, #23
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	23a0      	movs	r3, #160	@ 0xa0
 80001f4:	05db      	lsls	r3, r3, #23
 80001f6:	2180      	movs	r1, #128	@ 0x80
 80001f8:	0189      	lsls	r1, r1, #6
 80001fa:	430a      	orrs	r2, r1
 80001fc:	601a      	str	r2, [r3, #0]



	//set PA6 to alternate function mode 1
	GPIOA->AFR[0] |= AFR6_TIM3_CH1;
 80001fe:	23a0      	movs	r3, #160	@ 0xa0
 8000200:	05db      	lsls	r3, r3, #23
 8000202:	6a1a      	ldr	r2, [r3, #32]
 8000204:	23a0      	movs	r3, #160	@ 0xa0
 8000206:	05db      	lsls	r3, r3, #23
 8000208:	2180      	movs	r1, #128	@ 0x80
 800020a:	0449      	lsls	r1, r1, #17
 800020c:	430a      	orrs	r2, r1
 800020e:	621a      	str	r2, [r3, #32]

	//enable clock to timer 3
	RCC->APBENR1 |= TIM3EN;
 8000210:	4b0b      	ldr	r3, [pc, #44]	@ (8000240 <tim3_pa6_input_capture+0x74>)
 8000212:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000214:	4b0a      	ldr	r3, [pc, #40]	@ (8000240 <tim3_pa6_input_capture+0x74>)
 8000216:	2102      	movs	r1, #2
 8000218:	430a      	orrs	r2, r1
 800021a:	63da      	str	r2, [r3, #60]	@ 0x3c

	//set prescaler
	TIM1->PSC = 1600 - 1;
 800021c:	4b0a      	ldr	r3, [pc, #40]	@ (8000248 <tim3_pa6_input_capture+0x7c>)
 800021e:	4a0b      	ldr	r2, [pc, #44]	@ (800024c <tim3_pa6_input_capture+0x80>)
 8000220:	629a      	str	r2, [r3, #40]	@ 0x28

	//set CH1 to capture on every  edge (input mode)
	TIM3->CCMR1 = CCER_CC1S_TIM3;
 8000222:	4b0b      	ldr	r3, [pc, #44]	@ (8000250 <tim3_pa6_input_capture+0x84>)
 8000224:	2201      	movs	r2, #1
 8000226:	619a      	str	r2, [r3, #24]
	//set CH1 to capture on rising edge
	TIM3->CCER |= CCER_CC1S_TIM3;
 8000228:	4b09      	ldr	r3, [pc, #36]	@ (8000250 <tim3_pa6_input_capture+0x84>)
 800022a:	6a1a      	ldr	r2, [r3, #32]
 800022c:	4b08      	ldr	r3, [pc, #32]	@ (8000250 <tim3_pa6_input_capture+0x84>)
 800022e:	2101      	movs	r1, #1
 8000230:	430a      	orrs	r2, r1
 8000232:	621a      	str	r2, [r3, #32]


	//enable timer 3
	TIM3->CR1 = CR1_CEN;
 8000234:	4b06      	ldr	r3, [pc, #24]	@ (8000250 <tim3_pa6_input_capture+0x84>)
 8000236:	2201      	movs	r2, #1
 8000238:	601a      	str	r2, [r3, #0]
	// main output enable (needed for TIM1 advanced timer)
	//TIM1->BDTR |= TIM_BDTR_MOE;

}
 800023a:	46c0      	nop			@ (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	40021000 	.word	0x40021000
 8000244:	ffffefff 	.word	0xffffefff
 8000248:	40012c00 	.word	0x40012c00
 800024c:	0000063f 	.word	0x0000063f
 8000250:	40000400 	.word	0x40000400

08000254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000254:	480d      	ldr	r0, [pc, #52]	@ (800028c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000256:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000258:	e000      	b.n	800025c <Reset_Handler+0x8>
 800025a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800025c:	480c      	ldr	r0, [pc, #48]	@ (8000290 <LoopForever+0x6>)
  ldr r1, =_edata
 800025e:	490d      	ldr	r1, [pc, #52]	@ (8000294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000260:	4a0d      	ldr	r2, [pc, #52]	@ (8000298 <LoopForever+0xe>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0a      	ldr	r2, [pc, #40]	@ (800029c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000274:	4c0a      	ldr	r4, [pc, #40]	@ (80002a0 <LoopForever+0x16>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000282:	f000 f811 	bl	80002a8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000286:	f7ff ff39 	bl	80000fc <main>

0800028a <LoopForever>:

LoopForever:
  b LoopForever
 800028a:	e7fe      	b.n	800028a <LoopForever>
  ldr   r0, =_estack
 800028c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000294:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000298:	08000310 	.word	0x08000310
  ldr r2, =_sbss
 800029c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a0:	20000020 	.word	0x20000020

080002a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a4:	e7fe      	b.n	80002a4 <ADC_IRQHandler>
	...

080002a8 <__libc_init_array>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	2600      	movs	r6, #0
 80002ac:	4c0c      	ldr	r4, [pc, #48]	@ (80002e0 <__libc_init_array+0x38>)
 80002ae:	4d0d      	ldr	r5, [pc, #52]	@ (80002e4 <__libc_init_array+0x3c>)
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	10a4      	asrs	r4, r4, #2
 80002b4:	42a6      	cmp	r6, r4
 80002b6:	d109      	bne.n	80002cc <__libc_init_array+0x24>
 80002b8:	2600      	movs	r6, #0
 80002ba:	f000 f819 	bl	80002f0 <_init>
 80002be:	4c0a      	ldr	r4, [pc, #40]	@ (80002e8 <__libc_init_array+0x40>)
 80002c0:	4d0a      	ldr	r5, [pc, #40]	@ (80002ec <__libc_init_array+0x44>)
 80002c2:	1b64      	subs	r4, r4, r5
 80002c4:	10a4      	asrs	r4, r4, #2
 80002c6:	42a6      	cmp	r6, r4
 80002c8:	d105      	bne.n	80002d6 <__libc_init_array+0x2e>
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	00b3      	lsls	r3, r6, #2
 80002ce:	58eb      	ldr	r3, [r5, r3]
 80002d0:	4798      	blx	r3
 80002d2:	3601      	adds	r6, #1
 80002d4:	e7ee      	b.n	80002b4 <__libc_init_array+0xc>
 80002d6:	00b3      	lsls	r3, r6, #2
 80002d8:	58eb      	ldr	r3, [r5, r3]
 80002da:	4798      	blx	r3
 80002dc:	3601      	adds	r6, #1
 80002de:	e7f2      	b.n	80002c6 <__libc_init_array+0x1e>
 80002e0:	08000308 	.word	0x08000308
 80002e4:	08000308 	.word	0x08000308
 80002e8:	0800030c 	.word	0x0800030c
 80002ec:	08000308 	.word	0x08000308

080002f0 <_init>:
 80002f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f2:	46c0      	nop			@ (mov r8, r8)
 80002f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f6:	bc08      	pop	{r3}
 80002f8:	469e      	mov	lr, r3
 80002fa:	4770      	bx	lr

080002fc <_fini>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	46c0      	nop			@ (mov r8, r8)
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr
