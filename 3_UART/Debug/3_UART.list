
3_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000034c  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000400  08000408  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000400  08000400  00001408  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000400  08000400  00001408  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000400  08000408  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000400  08000400  00001400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000404  08000404  00001404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000408  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000408  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000041d  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000016f  00000000  00000000  0000184d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  000019c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000045  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ab9a  00000000  00000000  00001a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000668  00000000  00000000  0000c607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003c0d7  00000000  00000000  0000cc6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00048d46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f4  00000000  00000000  00048d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00048e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000000 	.word	0x20000000
 80000d4:	00000000 	.word	0x00000000
 80000d8:	080003e8 	.word	0x080003e8

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000004 	.word	0x20000004
 80000f8:	080003e8 	.word	0x080003e8

080000fc <__udivsi3>:
 80000fc:	2200      	movs	r2, #0
 80000fe:	0843      	lsrs	r3, r0, #1
 8000100:	428b      	cmp	r3, r1
 8000102:	d374      	bcc.n	80001ee <__udivsi3+0xf2>
 8000104:	0903      	lsrs	r3, r0, #4
 8000106:	428b      	cmp	r3, r1
 8000108:	d35f      	bcc.n	80001ca <__udivsi3+0xce>
 800010a:	0a03      	lsrs	r3, r0, #8
 800010c:	428b      	cmp	r3, r1
 800010e:	d344      	bcc.n	800019a <__udivsi3+0x9e>
 8000110:	0b03      	lsrs	r3, r0, #12
 8000112:	428b      	cmp	r3, r1
 8000114:	d328      	bcc.n	8000168 <__udivsi3+0x6c>
 8000116:	0c03      	lsrs	r3, r0, #16
 8000118:	428b      	cmp	r3, r1
 800011a:	d30d      	bcc.n	8000138 <__udivsi3+0x3c>
 800011c:	22ff      	movs	r2, #255	@ 0xff
 800011e:	0209      	lsls	r1, r1, #8
 8000120:	ba12      	rev	r2, r2
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d302      	bcc.n	800012e <__udivsi3+0x32>
 8000128:	1212      	asrs	r2, r2, #8
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	d065      	beq.n	80001fa <__udivsi3+0xfe>
 800012e:	0b03      	lsrs	r3, r0, #12
 8000130:	428b      	cmp	r3, r1
 8000132:	d319      	bcc.n	8000168 <__udivsi3+0x6c>
 8000134:	e000      	b.n	8000138 <__udivsi3+0x3c>
 8000136:	0a09      	lsrs	r1, r1, #8
 8000138:	0bc3      	lsrs	r3, r0, #15
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x46>
 800013e:	03cb      	lsls	r3, r1, #15
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0b83      	lsrs	r3, r0, #14
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x52>
 800014a:	038b      	lsls	r3, r1, #14
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b43      	lsrs	r3, r0, #13
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x5e>
 8000156:	034b      	lsls	r3, r1, #13
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b03      	lsrs	r3, r0, #12
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x6a>
 8000162:	030b      	lsls	r3, r1, #12
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0ac3      	lsrs	r3, r0, #11
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x76>
 800016e:	02cb      	lsls	r3, r1, #11
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0a83      	lsrs	r3, r0, #10
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x82>
 800017a:	028b      	lsls	r3, r1, #10
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a43      	lsrs	r3, r0, #9
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x8e>
 8000186:	024b      	lsls	r3, r1, #9
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a03      	lsrs	r3, r0, #8
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x9a>
 8000192:	020b      	lsls	r3, r1, #8
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	d2cd      	bcs.n	8000136 <__udivsi3+0x3a>
 800019a:	09c3      	lsrs	r3, r0, #7
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xa8>
 80001a0:	01cb      	lsls	r3, r1, #7
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0983      	lsrs	r3, r0, #6
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xb4>
 80001ac:	018b      	lsls	r3, r1, #6
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0943      	lsrs	r3, r0, #5
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xc0>
 80001b8:	014b      	lsls	r3, r1, #5
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0903      	lsrs	r3, r0, #4
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xcc>
 80001c4:	010b      	lsls	r3, r1, #4
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	08c3      	lsrs	r3, r0, #3
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xd8>
 80001d0:	00cb      	lsls	r3, r1, #3
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0883      	lsrs	r3, r0, #2
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xe4>
 80001dc:	008b      	lsls	r3, r1, #2
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0843      	lsrs	r3, r0, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xf0>
 80001e8:	004b      	lsls	r3, r1, #1
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	1a41      	subs	r1, r0, r1
 80001f0:	d200      	bcs.n	80001f4 <__udivsi3+0xf8>
 80001f2:	4601      	mov	r1, r0
 80001f4:	4152      	adcs	r2, r2
 80001f6:	4610      	mov	r0, r2
 80001f8:	4770      	bx	lr
 80001fa:	e7ff      	b.n	80001fc <__udivsi3+0x100>
 80001fc:	b501      	push	{r0, lr}
 80001fe:	2000      	movs	r0, #0
 8000200:	f000 f806 	bl	8000210 <__aeabi_idiv0>
 8000204:	bd02      	pop	{r1, pc}
 8000206:	46c0      	nop			@ (mov r8, r8)

08000208 <__aeabi_uidivmod>:
 8000208:	2900      	cmp	r1, #0
 800020a:	d0f7      	beq.n	80001fc <__udivsi3+0x100>
 800020c:	e776      	b.n	80000fc <__udivsi3>
 800020e:	4770      	bx	lr

08000210 <__aeabi_idiv0>:
 8000210:	4770      	bx	lr
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <main>:
void uart2_write(int ch);
void uart2_tx_init(void);


int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	uart2_tx_init();
 8000218:	f000 f804 	bl	8000224 <uart2_tx_init>
	while(1)
	{
		uart2_write('U');
 800021c:	2055      	movs	r0, #85	@ 0x55
 800021e:	f000 f857 	bl	80002d0 <uart2_write>
 8000222:	e7fb      	b.n	800021c <main+0x8>

08000224 <uart2_tx_init>:

}


void uart2_tx_init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	//uart gpio pin
	//enable clock on gpioa
	RCC->IOPENR |= GPIOAEN;
 8000228:	4b24      	ldr	r3, [pc, #144]	@ (80002bc <uart2_tx_init+0x98>)
 800022a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800022c:	4b23      	ldr	r3, [pc, #140]	@ (80002bc <uart2_tx_init+0x98>)
 800022e:	2101      	movs	r1, #1
 8000230:	430a      	orrs	r2, r1
 8000232:	635a      	str	r2, [r3, #52]	@ 0x34

	//PA2 mode to alternate function mode
	GPIOA->MODER &=~(1U<<4);
 8000234:	23a0      	movs	r3, #160	@ 0xa0
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	23a0      	movs	r3, #160	@ 0xa0
 800023c:	05db      	lsls	r3, r3, #23
 800023e:	2110      	movs	r1, #16
 8000240:	438a      	bics	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<5);
 8000244:	23a0      	movs	r3, #160	@ 0xa0
 8000246:	05db      	lsls	r3, r3, #23
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	23a0      	movs	r3, #160	@ 0xa0
 800024c:	05db      	lsls	r3, r3, #23
 800024e:	2120      	movs	r1, #32
 8000250:	430a      	orrs	r2, r1
 8000252:	601a      	str	r2, [r3, #0]

	//SetPA2 alt function type to UART_TX (AF07)
	GPIOA->AFR[0] &= ~(0xFU << (2 * 4)); // clear AFRL bits for PA2
 8000254:	23a0      	movs	r3, #160	@ 0xa0
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	6a1a      	ldr	r2, [r3, #32]
 800025a:	23a0      	movs	r3, #160	@ 0xa0
 800025c:	05db      	lsls	r3, r3, #23
 800025e:	4918      	ldr	r1, [pc, #96]	@ (80002c0 <uart2_tx_init+0x9c>)
 8000260:	400a      	ands	r2, r1
 8000262:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x1U << (2 * 4)); // AF1 = USART2_TX
 8000264:	23a0      	movs	r3, #160	@ 0xa0
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	6a1a      	ldr	r2, [r3, #32]
 800026a:	23a0      	movs	r3, #160	@ 0xa0
 800026c:	05db      	lsls	r3, r3, #23
 800026e:	2180      	movs	r1, #128	@ 0x80
 8000270:	0049      	lsls	r1, r1, #1
 8000272:	430a      	orrs	r2, r1
 8000274:	621a      	str	r2, [r3, #32]

	//configure UART module
	//enable clock on UART2
	RCC->APBENR1 |= UART2EN;
 8000276:	4b11      	ldr	r3, [pc, #68]	@ (80002bc <uart2_tx_init+0x98>)
 8000278:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800027a:	4b10      	ldr	r3, [pc, #64]	@ (80002bc <uart2_tx_init+0x98>)
 800027c:	2180      	movs	r1, #128	@ 0x80
 800027e:	0289      	lsls	r1, r1, #10
 8000280:	430a      	orrs	r2, r1
 8000282:	63da      	str	r2, [r3, #60]	@ 0x3c
	//consigure BAUD rate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000284:	23e1      	movs	r3, #225	@ 0xe1
 8000286:	025b      	lsls	r3, r3, #9
 8000288:	490e      	ldr	r1, [pc, #56]	@ (80002c4 <uart2_tx_init+0xa0>)
 800028a:	480f      	ldr	r0, [pc, #60]	@ (80002c8 <uart2_tx_init+0xa4>)
 800028c:	001a      	movs	r2, r3
 800028e:	f000 f835 	bl	80002fc <uart_set_baudrate>
	//USART2->BRR =  (2 * 48000000)/921600;
	//config transfer direction
	USART2->CR1 = 0x0;
 8000292:	4b0d      	ldr	r3, [pc, #52]	@ (80002c8 <uart2_tx_init+0xa4>)
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
	USART2->CR1 = CR1_TE;
 8000298:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <uart2_tx_init+0xa4>)
 800029a:	2208      	movs	r2, #8
 800029c:	601a      	str	r2, [r3, #0]
	USART2->CR1 &= ~CR_FIFOEN;
 800029e:	4b0a      	ldr	r3, [pc, #40]	@ (80002c8 <uart2_tx_init+0xa4>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <uart2_tx_init+0xa4>)
 80002a4:	4909      	ldr	r1, [pc, #36]	@ (80002cc <uart2_tx_init+0xa8>)
 80002a6:	400a      	ands	r2, r1
 80002a8:	601a      	str	r2, [r3, #0]
	//enable uArt module
	USART2->CR1 |= CR1_UE;
 80002aa:	4b07      	ldr	r3, [pc, #28]	@ (80002c8 <uart2_tx_init+0xa4>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b06      	ldr	r3, [pc, #24]	@ (80002c8 <uart2_tx_init+0xa4>)
 80002b0:	2101      	movs	r1, #1
 80002b2:	430a      	orrs	r2, r1
 80002b4:	601a      	str	r2, [r3, #0]


}
 80002b6:	46c0      	nop			@ (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40021000 	.word	0x40021000
 80002c0:	fffff0ff 	.word	0xfffff0ff
 80002c4:	00b71b00 	.word	0x00b71b00
 80002c8:	40004400 	.word	0x40004400
 80002cc:	dfffffff 	.word	0xdfffffff

080002d0 <uart2_write>:

void uart2_write(int ch)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	//transmit data reg should be empty first
	while(!(USART2->ISR & SR_TXE)){};
 80002d8:	46c0      	nop			@ (mov r8, r8)
 80002da:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <uart2_write+0x28>)
 80002dc:	69db      	ldr	r3, [r3, #28]
 80002de:	2280      	movs	r2, #128	@ 0x80
 80002e0:	4013      	ands	r3, r2
 80002e2:	d0fa      	beq.n	80002da <uart2_write+0xa>
	//write to transmit data reg
	USART2->TDR  = (ch & 0xFF);
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4b04      	ldr	r3, [pc, #16]	@ (80002f8 <uart2_write+0x28>)
 80002e8:	21ff      	movs	r1, #255	@ 0xff
 80002ea:	400a      	ands	r2, r1
 80002ec:	629a      	str	r2, [r3, #40]	@ 0x28
	//

}
 80002ee:	46c0      	nop			@ (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b002      	add	sp, #8
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	46c0      	nop			@ (mov r8, r8)
 80002f8:	40004400 	.word	0x40004400

080002fc <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef * USARTx, uint32_t PeriphClk, uint32_t DesiredBaudRate)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	60f8      	str	r0, [r7, #12]
 8000304:	60b9      	str	r1, [r7, #8]
 8000306:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, DesiredBaudRate);
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	0011      	movs	r1, r2
 800030e:	0018      	movs	r0, r3
 8000310:	f000 f808 	bl	8000324 <compute_uart_bd>
 8000314:	0003      	movs	r3, r0
 8000316:	001a      	movs	r2, r3
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	60da      	str	r2, [r3, #12]
}
 800031c:	46c0      	nop			@ (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b004      	add	sp, #16
 8000322:	bd80      	pop	{r7, pc}

08000324 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	085a      	lsrs	r2, r3, #1
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	18d3      	adds	r3, r2, r3
 8000336:	6839      	ldr	r1, [r7, #0]
 8000338:	0018      	movs	r0, r3
 800033a:	f7ff fedf 	bl	80000fc <__udivsi3>
 800033e:	0003      	movs	r3, r0
 8000340:	b29b      	uxth	r3, r3
}
 8000342:	0018      	movs	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	b002      	add	sp, #8
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800034c:	480d      	ldr	r0, [pc, #52]	@ (8000384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000350:	e000      	b.n	8000354 <Reset_Handler+0x8>
 8000352:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	@ (8000388 <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	@ (800038c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	@ (8000390 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	@ (8000398 <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800037a:	f000 f811 	bl	80003a0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800037e:	f7ff ff49 	bl	8000214 <main>

08000382 <LoopForever>:

LoopForever:
  b LoopForever
 8000382:	e7fe      	b.n	8000382 <LoopForever>
  ldr   r0, =_estack
 8000384:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000390:	08000408 	.word	0x08000408
  ldr r2, =_sbss
 8000394:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000398:	2000001c 	.word	0x2000001c

0800039c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC_IRQHandler>
	...

080003a0 <__libc_init_array>:
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	2600      	movs	r6, #0
 80003a4:	4c0c      	ldr	r4, [pc, #48]	@ (80003d8 <__libc_init_array+0x38>)
 80003a6:	4d0d      	ldr	r5, [pc, #52]	@ (80003dc <__libc_init_array+0x3c>)
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	10a4      	asrs	r4, r4, #2
 80003ac:	42a6      	cmp	r6, r4
 80003ae:	d109      	bne.n	80003c4 <__libc_init_array+0x24>
 80003b0:	2600      	movs	r6, #0
 80003b2:	f000 f819 	bl	80003e8 <_init>
 80003b6:	4c0a      	ldr	r4, [pc, #40]	@ (80003e0 <__libc_init_array+0x40>)
 80003b8:	4d0a      	ldr	r5, [pc, #40]	@ (80003e4 <__libc_init_array+0x44>)
 80003ba:	1b64      	subs	r4, r4, r5
 80003bc:	10a4      	asrs	r4, r4, #2
 80003be:	42a6      	cmp	r6, r4
 80003c0:	d105      	bne.n	80003ce <__libc_init_array+0x2e>
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	00b3      	lsls	r3, r6, #2
 80003c6:	58eb      	ldr	r3, [r5, r3]
 80003c8:	4798      	blx	r3
 80003ca:	3601      	adds	r6, #1
 80003cc:	e7ee      	b.n	80003ac <__libc_init_array+0xc>
 80003ce:	00b3      	lsls	r3, r6, #2
 80003d0:	58eb      	ldr	r3, [r5, r3]
 80003d2:	4798      	blx	r3
 80003d4:	3601      	adds	r6, #1
 80003d6:	e7f2      	b.n	80003be <__libc_init_array+0x1e>
 80003d8:	08000400 	.word	0x08000400
 80003dc:	08000400 	.word	0x08000400
 80003e0:	08000404 	.word	0x08000404
 80003e4:	08000400 	.word	0x08000400

080003e8 <_init>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr

080003f4 <_fini>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	46c0      	nop			@ (mov r8, r8)
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr
