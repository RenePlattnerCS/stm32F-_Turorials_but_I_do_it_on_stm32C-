#include "spi.h"
#include "stm32C0xx.h"

#define SPI1EN			(1U << 12)
#define GPIOAEN			(1U << 0)

#define SPI_CPOL		(1U << 1)
#define SPI_CPHA		(1U<< 0)
#define SPI_FULL_DUPLEX (1U << 10)
#define SPI_MASTER		(1U << 2)

#define SPI_TXEIE		(1U << 7)

//NSS   PA4 -> output pin , slave select

//SCK   PA5
//MISO  PA6
//MOSI  PA7
//AF0
void spi_gpio_init(void)
{

	RCC->IOPENR |= GPIOAEN;


	//AF0
	GPIOA->MODER &= ~(1U<<10);
	GPIOA->MODER |= (1U<<11);

	GPIOA->MODER &= ~(1U<<12);
	GPIOA->MODER |= (1U<<13);

	GPIOA->MODER &= ~(1U<<14);
	GPIOA->MODER |= (1U<<15);


	GPIOA->MODER  =   (1U<<8);
	GPIOA->MODER  &= ~(1U<<9);

	GPIOA->AFR[1] = 0x0; //Af0



}

void spi1_config(void)
{
	RCC->APBENR2 |= SPI1EN;

	SPI1->CR1 |= (1U <<3);
	SPI1->CR1 &= ~(1U <<3);
	SPI1->CR1 &= ~(1U <<4);

	SPI1->CR1 |= SPI_CPOL;
	SPI1->CR1 |= SPI_CPHA;

	SPI1->CR1 &= ~SPI_FULL_DUPLEX;

	SPI1->CR1 &= ~ (1U << 7);

	SPI1->CR1 |= SPI_MASTER;

	//data Size => 8bit
	SPI1->CR2 |= (1U << 8);
	SPI1->CR2 |= (1U << 9);
	SPI1->CR2 |= (1U << 10);
	SPI1->CR2 |= (0U << 11);

	//internal slave select
	SPI1->CR1 |= (1U << 8);
	SPI1->CR1 |= (1U << 9);

	//peripheral enable
	SPI1->CR1 |= (1U << 6);


}

void spi1_transmit(uint8_t *data, uint32_t size)
{
	uint32_t i=0;
	uint8_t temp;

	while(i<size)
	{

	}
}
