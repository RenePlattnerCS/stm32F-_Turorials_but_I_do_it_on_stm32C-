#include <stdint.h>
#include "stm32C0xx.h"



#define GPIOAEN		(1U<<0)
#define UART2EN		(1U<<17)

#define CR1_TE		(1U << 3)
#define CR1_UE		(1U << 0)

#define SR_TXE		(1U << 7)

#define SYS_FREQ	16000000
#define APB1_CLK	SYS_FREQ

#define UART_BAUDRATE	115200

static void uart_set_baudrate(USART_TypeDef * USARTx, uint32_t PeriphClk, uint32_t DesiredBaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);
void uart2_tx_init(void);


int main(void)
{
	void uart2_tx_init();
	while(1)
	{
		uart2_write('A');

	}

}


void uart2_tx_init(void)
{
	//uart gpio pin
	//enable clock on gpioa
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;   // Enable GPIOA clock

	//PA2 mode to alternate function mode
	GPIOA->MODER &= ~(3U << (2 * 2));   // Clear mode bits for PA2
	GPIOA->MODER |=  (2U << (2 * 2));   // Alternate function mode

	//SetPA2 alt function type to UART_TX (AF07)
	//GPIOA->AFR[0] |= (1U <<8);
	//GPIOA->AFR[0] &= ~(1U <<9);
	//GPIOA->AFR[0] &= ~(1U <<10);
	//GPIOA->AFR[0] &= ~(1U <<11);
	GPIOA->AFR[0] &= ~(0xFU << (2 * 4));
	GPIOA->AFR[0] |=  (1U << (2 * 4));  // AF1 = USART2_TX

	//configure UART module
	//enable clock on UART2
	RCC->APBENR1 |= RCC_APBENR1_USART2EN; // Enable USART2 clock
	//consigure BAUD rate
	USART2->BRR = 16000000 / 9600; // Baudrate 9600 @ 16 MHz HSI
	//uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
	//config transfer direction
	USART2->CR1 = 0x0;
	//USART2->CR1 = CR1_TE;
	//enable uArt module
	//USART2->CR1 |= CR1_UE;

	USART2->CR1 |= USART_CR1_TE;   // Enable transmitter
	USART2->CR1 |= USART_CR1_UE;   // Enable USART
}

void uart2_write(int ch)
{
	while (!(USART2->ISR & USART_ISR_TXE_TXFNF)){}; // Wait until TX ready
	    	//while(!(USART2->ISR & SR_TXE)){};

	    	USART2->TDR = 'A';

}

static void uart_set_baudrate(USART_TypeDef * USARTx, uint32_t PeriphClk, uint32_t DesiredBaudRate)
{
	USARTx->BRR = compute_uart_bd(PeriphClk, DesiredBaudRate);
}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
	return ((PeriphClk + (BaudRate / 2U)) / BaudRate);
}
