#include "stm32C0xx.h"



#define GPIOAEN		(1U<<0)


#define UART2EN		(1U<<17)

#define SYS_FREQ		16000000

static void uart_set_baudrate(USART_TypeDef * USARTx, uint32_t PeriphClk, uint32_t DesiredBaudRate);

static compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

int main(void)
{



	while(1)
	{


	}





}


void uart2_tx_init(void)
{
	//uart gpio pin
	//enable clock on gpioa
	RCC->IOPENR |= GPIOAEN;

	//PA2 mode to alternate function mode
	GPIOA->MODER &=~(1U<<4);
	GPIOA->MODER |= (1U<<5);

	//SetPA2 alt function type to UART_TX (AF07)
	GPIOA->AFR[0] |= (1U <<8);
	GPIOA->AFR[0] |= (1U <<9);
	GPIOA->AFR[0] |= (1U <<10);
	GPIOA->AFR[0] &= ~(1U <<11);

	//configure UART module
	//enable clock on UART2
	RCC->APBENR1 |= UART2EN;
	//consigure BAUD rate
	uart_set_baudrate(USART2, )
	//config transfer direction
	//enable uArt module


}

static void uart_set_baudrate(USART_TypeDef * USARTx, uint32_t PeriphClk, uint32_t DesiredBaudRate)
{
	USARTx->BRR = compute_uart_bd(PeriphClk, DesiredBaudRate);
}

static compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
	return (PeriphClk + (BaudRate / 2U)) / BaudRate;
}
