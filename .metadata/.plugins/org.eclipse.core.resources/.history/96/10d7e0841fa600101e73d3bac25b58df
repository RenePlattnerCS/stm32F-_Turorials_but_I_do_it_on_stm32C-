#include "spi.h"

#define SPI1EN			(1U << 12)
#define GPIOAEN			(1U << 0)

#define SPI_CPOL		(1U << 1)
#define SPI_CPHA		(1U<< 0)
#define SPI_FULL_DUPLEX (1U << 10)
#define SPI_MASTER		(1U << 2)

#define SPI_RXNE	(1U << 0)
#define SPI_TXE		(1U << 1)
#define SPI_BUSY	(1U << 7)

//NSS   PA4 -> output pin , slave select

//SCK   PA5
//MISO  PA6
//MOSI  PA7
//AF0
void spi_gpio_init(void)
{

	RCC->IOPENR |= GPIOAEN;


	//AF0
	GPIOA->MODER &= ~(1U<<10);
	GPIOA->MODER |= (1U<<11);

	GPIOA->MODER &= ~(1U<<12);
	GPIOA->MODER |= (1U<<13);

	GPIOA->MODER &= ~(1U<<14);
	GPIOA->MODER |= (1U<<15);


	GPIOA->MODER  |=   (1U<<8);
	GPIOA->MODER  &= ~(1U<<9);

	GPIOA->AFR[1] = 0x0; //Af0



}

void spi1_config(void)
{
	RCC->APBENR2 |= SPI1EN;

	SPI1->CR1 |= (1U <<3);
	SPI1->CR1 &= ~(1U <<3);
	SPI1->CR1 &= ~(1U <<4);

	SPI1->CR1 |= SPI_CPOL;
	SPI1->CR1 |= SPI_CPHA;

	SPI1->CR1 &= ~SPI_FULL_DUPLEX;

	SPI1->CR1 &= ~ (1U << 7);

	SPI1->CR1 |= SPI_MASTER;

	//data Size => 8bit
	SPI1->CR2 |= (1U << 8);
	SPI1->CR2 |= (1U << 9);
	SPI1->CR2 |= (1U << 10);
	SPI1->CR2 |= (0U << 11);

	//internal slave select
	SPI1->CR1 |= (1U << 8);
	SPI1->CR1 |= (1U << 9);

	//peripheral enable
	SPI1->CR1 |= (1U << 6);


}

void spi1_transmit(uint8_t *data, uint32_t size)
{
	uint32_t i=0;
	uint8_t temp;

	while(i<size)
	{
		//wait for TXE
		while(!(SPI1->SR & SPI_TXE)){}

		//write data to data reg
		SPI1->DR = data[i];
		i++;
	}

	//wait again for TXE
	while(!(SPI1->SR & SPI_TXE)){}
	//wait for busy
	while((SPI1->SR & SPI_BUSY)){}

	//clear overrun flag
	temp = SPI1->DR;
	temp = SPI1->SR;
}


void spi1_receive(uint8_t *data, uint32_t size)
{
	while(size)
	{
		//send dummy data
		SPI1->DR = 0;
		//wait for RXNE
		while(!(SPI1->SR & SPI_RXNE)){}

		//Read data
		*data++ = SPI1->DR;
		size--;
	}
}

void cs_enable(void)
{
	//NSS   PA4
	GPIOA->ODR &= ~(1U<<9);

}

void cs_disable(void)
{
	//NSS   PA4
	GPIOA->ODR |= (1U<<9);

}
