
18_I2C_accelerometer_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000968  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a1c  08000a24  00001a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a1c  08000a1c  00001a24  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000a1c  08000a1c  00001a24  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000a1c  08000a24  00001a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a1c  08000a1c  00001a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a20  08000a20  00001a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08000a24  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000a24  00002038  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006fb  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000306  00000000  00000000  00002147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00002450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000080  00000000  00000000  00002510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000ef0  00000000  00000000  00002590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001547  00000000  00000000  00003480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003fd2c  00000000  00000000  000049c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000446f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001e8  00000000  00000000  00044738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00044920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000000 	.word	0x20000000
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08000a04 	.word	0x08000a04

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000004 	.word	0x20000004
 80000f8:	08000a04 	.word	0x08000a04

080000fc <__aeabi_fmul>:
 80000fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80000fe:	464f      	mov	r7, r9
 8000100:	4646      	mov	r6, r8
 8000102:	46d6      	mov	lr, sl
 8000104:	0044      	lsls	r4, r0, #1
 8000106:	b5c0      	push	{r6, r7, lr}
 8000108:	0246      	lsls	r6, r0, #9
 800010a:	1c0f      	adds	r7, r1, #0
 800010c:	0a76      	lsrs	r6, r6, #9
 800010e:	0e24      	lsrs	r4, r4, #24
 8000110:	0fc5      	lsrs	r5, r0, #31
 8000112:	2c00      	cmp	r4, #0
 8000114:	d100      	bne.n	8000118 <__aeabi_fmul+0x1c>
 8000116:	e0da      	b.n	80002ce <__aeabi_fmul+0x1d2>
 8000118:	2cff      	cmp	r4, #255	@ 0xff
 800011a:	d074      	beq.n	8000206 <__aeabi_fmul+0x10a>
 800011c:	2380      	movs	r3, #128	@ 0x80
 800011e:	00f6      	lsls	r6, r6, #3
 8000120:	04db      	lsls	r3, r3, #19
 8000122:	431e      	orrs	r6, r3
 8000124:	2300      	movs	r3, #0
 8000126:	4699      	mov	r9, r3
 8000128:	469a      	mov	sl, r3
 800012a:	3c7f      	subs	r4, #127	@ 0x7f
 800012c:	027b      	lsls	r3, r7, #9
 800012e:	0a5b      	lsrs	r3, r3, #9
 8000130:	4698      	mov	r8, r3
 8000132:	007b      	lsls	r3, r7, #1
 8000134:	0e1b      	lsrs	r3, r3, #24
 8000136:	0fff      	lsrs	r7, r7, #31
 8000138:	2b00      	cmp	r3, #0
 800013a:	d074      	beq.n	8000226 <__aeabi_fmul+0x12a>
 800013c:	2bff      	cmp	r3, #255	@ 0xff
 800013e:	d100      	bne.n	8000142 <__aeabi_fmul+0x46>
 8000140:	e08e      	b.n	8000260 <__aeabi_fmul+0x164>
 8000142:	4642      	mov	r2, r8
 8000144:	2180      	movs	r1, #128	@ 0x80
 8000146:	00d2      	lsls	r2, r2, #3
 8000148:	04c9      	lsls	r1, r1, #19
 800014a:	4311      	orrs	r1, r2
 800014c:	3b7f      	subs	r3, #127	@ 0x7f
 800014e:	002a      	movs	r2, r5
 8000150:	18e4      	adds	r4, r4, r3
 8000152:	464b      	mov	r3, r9
 8000154:	407a      	eors	r2, r7
 8000156:	4688      	mov	r8, r1
 8000158:	b2d2      	uxtb	r2, r2
 800015a:	2b0a      	cmp	r3, #10
 800015c:	dc75      	bgt.n	800024a <__aeabi_fmul+0x14e>
 800015e:	464b      	mov	r3, r9
 8000160:	2000      	movs	r0, #0
 8000162:	2b02      	cmp	r3, #2
 8000164:	dd0f      	ble.n	8000186 <__aeabi_fmul+0x8a>
 8000166:	4649      	mov	r1, r9
 8000168:	2301      	movs	r3, #1
 800016a:	408b      	lsls	r3, r1
 800016c:	21a6      	movs	r1, #166	@ 0xa6
 800016e:	00c9      	lsls	r1, r1, #3
 8000170:	420b      	tst	r3, r1
 8000172:	d169      	bne.n	8000248 <__aeabi_fmul+0x14c>
 8000174:	2190      	movs	r1, #144	@ 0x90
 8000176:	0089      	lsls	r1, r1, #2
 8000178:	420b      	tst	r3, r1
 800017a:	d000      	beq.n	800017e <__aeabi_fmul+0x82>
 800017c:	e100      	b.n	8000380 <__aeabi_fmul+0x284>
 800017e:	2188      	movs	r1, #136	@ 0x88
 8000180:	4219      	tst	r1, r3
 8000182:	d000      	beq.n	8000186 <__aeabi_fmul+0x8a>
 8000184:	e0f5      	b.n	8000372 <__aeabi_fmul+0x276>
 8000186:	4641      	mov	r1, r8
 8000188:	0409      	lsls	r1, r1, #16
 800018a:	0c09      	lsrs	r1, r1, #16
 800018c:	4643      	mov	r3, r8
 800018e:	0008      	movs	r0, r1
 8000190:	0c35      	lsrs	r5, r6, #16
 8000192:	0436      	lsls	r6, r6, #16
 8000194:	0c1b      	lsrs	r3, r3, #16
 8000196:	0c36      	lsrs	r6, r6, #16
 8000198:	4370      	muls	r0, r6
 800019a:	4369      	muls	r1, r5
 800019c:	435e      	muls	r6, r3
 800019e:	435d      	muls	r5, r3
 80001a0:	1876      	adds	r6, r6, r1
 80001a2:	0c03      	lsrs	r3, r0, #16
 80001a4:	199b      	adds	r3, r3, r6
 80001a6:	4299      	cmp	r1, r3
 80001a8:	d903      	bls.n	80001b2 <__aeabi_fmul+0xb6>
 80001aa:	2180      	movs	r1, #128	@ 0x80
 80001ac:	0249      	lsls	r1, r1, #9
 80001ae:	468c      	mov	ip, r1
 80001b0:	4465      	add	r5, ip
 80001b2:	0400      	lsls	r0, r0, #16
 80001b4:	0419      	lsls	r1, r3, #16
 80001b6:	0c00      	lsrs	r0, r0, #16
 80001b8:	1809      	adds	r1, r1, r0
 80001ba:	018e      	lsls	r6, r1, #6
 80001bc:	1e70      	subs	r0, r6, #1
 80001be:	4186      	sbcs	r6, r0
 80001c0:	0c1b      	lsrs	r3, r3, #16
 80001c2:	0e89      	lsrs	r1, r1, #26
 80001c4:	195b      	adds	r3, r3, r5
 80001c6:	430e      	orrs	r6, r1
 80001c8:	019b      	lsls	r3, r3, #6
 80001ca:	431e      	orrs	r6, r3
 80001cc:	011b      	lsls	r3, r3, #4
 80001ce:	d46c      	bmi.n	80002aa <__aeabi_fmul+0x1ae>
 80001d0:	0023      	movs	r3, r4
 80001d2:	337f      	adds	r3, #127	@ 0x7f
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	dc00      	bgt.n	80001da <__aeabi_fmul+0xde>
 80001d8:	e0b1      	b.n	800033e <__aeabi_fmul+0x242>
 80001da:	0015      	movs	r5, r2
 80001dc:	0771      	lsls	r1, r6, #29
 80001de:	d00b      	beq.n	80001f8 <__aeabi_fmul+0xfc>
 80001e0:	200f      	movs	r0, #15
 80001e2:	0021      	movs	r1, r4
 80001e4:	4030      	ands	r0, r6
 80001e6:	2804      	cmp	r0, #4
 80001e8:	d006      	beq.n	80001f8 <__aeabi_fmul+0xfc>
 80001ea:	3604      	adds	r6, #4
 80001ec:	0132      	lsls	r2, r6, #4
 80001ee:	d503      	bpl.n	80001f8 <__aeabi_fmul+0xfc>
 80001f0:	4b6e      	ldr	r3, [pc, #440]	@ (80003ac <__aeabi_fmul+0x2b0>)
 80001f2:	401e      	ands	r6, r3
 80001f4:	000b      	movs	r3, r1
 80001f6:	3380      	adds	r3, #128	@ 0x80
 80001f8:	2bfe      	cmp	r3, #254	@ 0xfe
 80001fa:	dd00      	ble.n	80001fe <__aeabi_fmul+0x102>
 80001fc:	e0bd      	b.n	800037a <__aeabi_fmul+0x27e>
 80001fe:	01b2      	lsls	r2, r6, #6
 8000200:	0a52      	lsrs	r2, r2, #9
 8000202:	b2db      	uxtb	r3, r3
 8000204:	e048      	b.n	8000298 <__aeabi_fmul+0x19c>
 8000206:	2e00      	cmp	r6, #0
 8000208:	d000      	beq.n	800020c <__aeabi_fmul+0x110>
 800020a:	e092      	b.n	8000332 <__aeabi_fmul+0x236>
 800020c:	2308      	movs	r3, #8
 800020e:	4699      	mov	r9, r3
 8000210:	3b06      	subs	r3, #6
 8000212:	469a      	mov	sl, r3
 8000214:	027b      	lsls	r3, r7, #9
 8000216:	0a5b      	lsrs	r3, r3, #9
 8000218:	4698      	mov	r8, r3
 800021a:	007b      	lsls	r3, r7, #1
 800021c:	24ff      	movs	r4, #255	@ 0xff
 800021e:	0e1b      	lsrs	r3, r3, #24
 8000220:	0fff      	lsrs	r7, r7, #31
 8000222:	2b00      	cmp	r3, #0
 8000224:	d18a      	bne.n	800013c <__aeabi_fmul+0x40>
 8000226:	4642      	mov	r2, r8
 8000228:	2a00      	cmp	r2, #0
 800022a:	d164      	bne.n	80002f6 <__aeabi_fmul+0x1fa>
 800022c:	4649      	mov	r1, r9
 800022e:	3201      	adds	r2, #1
 8000230:	4311      	orrs	r1, r2
 8000232:	4689      	mov	r9, r1
 8000234:	290a      	cmp	r1, #10
 8000236:	dc08      	bgt.n	800024a <__aeabi_fmul+0x14e>
 8000238:	407d      	eors	r5, r7
 800023a:	2001      	movs	r0, #1
 800023c:	b2ea      	uxtb	r2, r5
 800023e:	2902      	cmp	r1, #2
 8000240:	dc91      	bgt.n	8000166 <__aeabi_fmul+0x6a>
 8000242:	0015      	movs	r5, r2
 8000244:	2200      	movs	r2, #0
 8000246:	e027      	b.n	8000298 <__aeabi_fmul+0x19c>
 8000248:	0015      	movs	r5, r2
 800024a:	4653      	mov	r3, sl
 800024c:	2b02      	cmp	r3, #2
 800024e:	d100      	bne.n	8000252 <__aeabi_fmul+0x156>
 8000250:	e093      	b.n	800037a <__aeabi_fmul+0x27e>
 8000252:	2b03      	cmp	r3, #3
 8000254:	d01a      	beq.n	800028c <__aeabi_fmul+0x190>
 8000256:	2b01      	cmp	r3, #1
 8000258:	d12c      	bne.n	80002b4 <__aeabi_fmul+0x1b8>
 800025a:	2300      	movs	r3, #0
 800025c:	2200      	movs	r2, #0
 800025e:	e01b      	b.n	8000298 <__aeabi_fmul+0x19c>
 8000260:	4643      	mov	r3, r8
 8000262:	34ff      	adds	r4, #255	@ 0xff
 8000264:	2b00      	cmp	r3, #0
 8000266:	d055      	beq.n	8000314 <__aeabi_fmul+0x218>
 8000268:	2103      	movs	r1, #3
 800026a:	464b      	mov	r3, r9
 800026c:	430b      	orrs	r3, r1
 800026e:	0019      	movs	r1, r3
 8000270:	2b0a      	cmp	r3, #10
 8000272:	dc00      	bgt.n	8000276 <__aeabi_fmul+0x17a>
 8000274:	e092      	b.n	800039c <__aeabi_fmul+0x2a0>
 8000276:	2b0f      	cmp	r3, #15
 8000278:	d000      	beq.n	800027c <__aeabi_fmul+0x180>
 800027a:	e08c      	b.n	8000396 <__aeabi_fmul+0x29a>
 800027c:	2280      	movs	r2, #128	@ 0x80
 800027e:	03d2      	lsls	r2, r2, #15
 8000280:	4216      	tst	r6, r2
 8000282:	d003      	beq.n	800028c <__aeabi_fmul+0x190>
 8000284:	4643      	mov	r3, r8
 8000286:	4213      	tst	r3, r2
 8000288:	d100      	bne.n	800028c <__aeabi_fmul+0x190>
 800028a:	e07d      	b.n	8000388 <__aeabi_fmul+0x28c>
 800028c:	2280      	movs	r2, #128	@ 0x80
 800028e:	03d2      	lsls	r2, r2, #15
 8000290:	4332      	orrs	r2, r6
 8000292:	0252      	lsls	r2, r2, #9
 8000294:	0a52      	lsrs	r2, r2, #9
 8000296:	23ff      	movs	r3, #255	@ 0xff
 8000298:	05d8      	lsls	r0, r3, #23
 800029a:	07ed      	lsls	r5, r5, #31
 800029c:	4310      	orrs	r0, r2
 800029e:	4328      	orrs	r0, r5
 80002a0:	bce0      	pop	{r5, r6, r7}
 80002a2:	46ba      	mov	sl, r7
 80002a4:	46b1      	mov	r9, r6
 80002a6:	46a8      	mov	r8, r5
 80002a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002aa:	2301      	movs	r3, #1
 80002ac:	0015      	movs	r5, r2
 80002ae:	0871      	lsrs	r1, r6, #1
 80002b0:	401e      	ands	r6, r3
 80002b2:	430e      	orrs	r6, r1
 80002b4:	0023      	movs	r3, r4
 80002b6:	3380      	adds	r3, #128	@ 0x80
 80002b8:	1c61      	adds	r1, r4, #1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	dd41      	ble.n	8000342 <__aeabi_fmul+0x246>
 80002be:	0772      	lsls	r2, r6, #29
 80002c0:	d094      	beq.n	80001ec <__aeabi_fmul+0xf0>
 80002c2:	220f      	movs	r2, #15
 80002c4:	4032      	ands	r2, r6
 80002c6:	2a04      	cmp	r2, #4
 80002c8:	d000      	beq.n	80002cc <__aeabi_fmul+0x1d0>
 80002ca:	e78e      	b.n	80001ea <__aeabi_fmul+0xee>
 80002cc:	e78e      	b.n	80001ec <__aeabi_fmul+0xf0>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d105      	bne.n	80002de <__aeabi_fmul+0x1e2>
 80002d2:	2304      	movs	r3, #4
 80002d4:	4699      	mov	r9, r3
 80002d6:	3b03      	subs	r3, #3
 80002d8:	2400      	movs	r4, #0
 80002da:	469a      	mov	sl, r3
 80002dc:	e726      	b.n	800012c <__aeabi_fmul+0x30>
 80002de:	0030      	movs	r0, r6
 80002e0:	f000 f8b6 	bl	8000450 <__clzsi2>
 80002e4:	2476      	movs	r4, #118	@ 0x76
 80002e6:	1f43      	subs	r3, r0, #5
 80002e8:	409e      	lsls	r6, r3
 80002ea:	2300      	movs	r3, #0
 80002ec:	4264      	negs	r4, r4
 80002ee:	4699      	mov	r9, r3
 80002f0:	469a      	mov	sl, r3
 80002f2:	1a24      	subs	r4, r4, r0
 80002f4:	e71a      	b.n	800012c <__aeabi_fmul+0x30>
 80002f6:	4640      	mov	r0, r8
 80002f8:	f000 f8aa 	bl	8000450 <__clzsi2>
 80002fc:	464b      	mov	r3, r9
 80002fe:	1a24      	subs	r4, r4, r0
 8000300:	3c76      	subs	r4, #118	@ 0x76
 8000302:	2b0a      	cmp	r3, #10
 8000304:	dca1      	bgt.n	800024a <__aeabi_fmul+0x14e>
 8000306:	4643      	mov	r3, r8
 8000308:	3805      	subs	r0, #5
 800030a:	4083      	lsls	r3, r0
 800030c:	407d      	eors	r5, r7
 800030e:	4698      	mov	r8, r3
 8000310:	b2ea      	uxtb	r2, r5
 8000312:	e724      	b.n	800015e <__aeabi_fmul+0x62>
 8000314:	464a      	mov	r2, r9
 8000316:	3302      	adds	r3, #2
 8000318:	4313      	orrs	r3, r2
 800031a:	002a      	movs	r2, r5
 800031c:	407a      	eors	r2, r7
 800031e:	b2d2      	uxtb	r2, r2
 8000320:	2b0a      	cmp	r3, #10
 8000322:	dc92      	bgt.n	800024a <__aeabi_fmul+0x14e>
 8000324:	4649      	mov	r1, r9
 8000326:	0015      	movs	r5, r2
 8000328:	2900      	cmp	r1, #0
 800032a:	d026      	beq.n	800037a <__aeabi_fmul+0x27e>
 800032c:	4699      	mov	r9, r3
 800032e:	2002      	movs	r0, #2
 8000330:	e719      	b.n	8000166 <__aeabi_fmul+0x6a>
 8000332:	230c      	movs	r3, #12
 8000334:	4699      	mov	r9, r3
 8000336:	3b09      	subs	r3, #9
 8000338:	24ff      	movs	r4, #255	@ 0xff
 800033a:	469a      	mov	sl, r3
 800033c:	e6f6      	b.n	800012c <__aeabi_fmul+0x30>
 800033e:	0015      	movs	r5, r2
 8000340:	0021      	movs	r1, r4
 8000342:	2201      	movs	r2, #1
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	2b1b      	cmp	r3, #27
 8000348:	dd00      	ble.n	800034c <__aeabi_fmul+0x250>
 800034a:	e786      	b.n	800025a <__aeabi_fmul+0x15e>
 800034c:	319e      	adds	r1, #158	@ 0x9e
 800034e:	0032      	movs	r2, r6
 8000350:	408e      	lsls	r6, r1
 8000352:	40da      	lsrs	r2, r3
 8000354:	1e73      	subs	r3, r6, #1
 8000356:	419e      	sbcs	r6, r3
 8000358:	4332      	orrs	r2, r6
 800035a:	0753      	lsls	r3, r2, #29
 800035c:	d004      	beq.n	8000368 <__aeabi_fmul+0x26c>
 800035e:	230f      	movs	r3, #15
 8000360:	4013      	ands	r3, r2
 8000362:	2b04      	cmp	r3, #4
 8000364:	d000      	beq.n	8000368 <__aeabi_fmul+0x26c>
 8000366:	3204      	adds	r2, #4
 8000368:	0153      	lsls	r3, r2, #5
 800036a:	d510      	bpl.n	800038e <__aeabi_fmul+0x292>
 800036c:	2301      	movs	r3, #1
 800036e:	2200      	movs	r2, #0
 8000370:	e792      	b.n	8000298 <__aeabi_fmul+0x19c>
 8000372:	003d      	movs	r5, r7
 8000374:	4646      	mov	r6, r8
 8000376:	4682      	mov	sl, r0
 8000378:	e767      	b.n	800024a <__aeabi_fmul+0x14e>
 800037a:	23ff      	movs	r3, #255	@ 0xff
 800037c:	2200      	movs	r2, #0
 800037e:	e78b      	b.n	8000298 <__aeabi_fmul+0x19c>
 8000380:	2280      	movs	r2, #128	@ 0x80
 8000382:	2500      	movs	r5, #0
 8000384:	03d2      	lsls	r2, r2, #15
 8000386:	e786      	b.n	8000296 <__aeabi_fmul+0x19a>
 8000388:	003d      	movs	r5, r7
 800038a:	431a      	orrs	r2, r3
 800038c:	e783      	b.n	8000296 <__aeabi_fmul+0x19a>
 800038e:	0192      	lsls	r2, r2, #6
 8000390:	2300      	movs	r3, #0
 8000392:	0a52      	lsrs	r2, r2, #9
 8000394:	e780      	b.n	8000298 <__aeabi_fmul+0x19c>
 8000396:	003d      	movs	r5, r7
 8000398:	4646      	mov	r6, r8
 800039a:	e777      	b.n	800028c <__aeabi_fmul+0x190>
 800039c:	002a      	movs	r2, r5
 800039e:	2301      	movs	r3, #1
 80003a0:	407a      	eors	r2, r7
 80003a2:	408b      	lsls	r3, r1
 80003a4:	2003      	movs	r0, #3
 80003a6:	b2d2      	uxtb	r2, r2
 80003a8:	e6e9      	b.n	800017e <__aeabi_fmul+0x82>
 80003aa:	46c0      	nop			@ (mov r8, r8)
 80003ac:	f7ffffff 	.word	0xf7ffffff

080003b0 <__aeabi_i2f>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	2800      	cmp	r0, #0
 80003b4:	d012      	beq.n	80003dc <__aeabi_i2f+0x2c>
 80003b6:	17c3      	asrs	r3, r0, #31
 80003b8:	18c5      	adds	r5, r0, r3
 80003ba:	405d      	eors	r5, r3
 80003bc:	0fc4      	lsrs	r4, r0, #31
 80003be:	0028      	movs	r0, r5
 80003c0:	f000 f846 	bl	8000450 <__clzsi2>
 80003c4:	239e      	movs	r3, #158	@ 0x9e
 80003c6:	1a1b      	subs	r3, r3, r0
 80003c8:	2b96      	cmp	r3, #150	@ 0x96
 80003ca:	dc0f      	bgt.n	80003ec <__aeabi_i2f+0x3c>
 80003cc:	2808      	cmp	r0, #8
 80003ce:	d038      	beq.n	8000442 <__aeabi_i2f+0x92>
 80003d0:	3808      	subs	r0, #8
 80003d2:	4085      	lsls	r5, r0
 80003d4:	026d      	lsls	r5, r5, #9
 80003d6:	0a6d      	lsrs	r5, r5, #9
 80003d8:	b2d8      	uxtb	r0, r3
 80003da:	e002      	b.n	80003e2 <__aeabi_i2f+0x32>
 80003dc:	2400      	movs	r4, #0
 80003de:	2000      	movs	r0, #0
 80003e0:	2500      	movs	r5, #0
 80003e2:	05c0      	lsls	r0, r0, #23
 80003e4:	4328      	orrs	r0, r5
 80003e6:	07e4      	lsls	r4, r4, #31
 80003e8:	4320      	orrs	r0, r4
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	2b99      	cmp	r3, #153	@ 0x99
 80003ee:	dc14      	bgt.n	800041a <__aeabi_i2f+0x6a>
 80003f0:	1f42      	subs	r2, r0, #5
 80003f2:	4095      	lsls	r5, r2
 80003f4:	002a      	movs	r2, r5
 80003f6:	4915      	ldr	r1, [pc, #84]	@ (800044c <__aeabi_i2f+0x9c>)
 80003f8:	4011      	ands	r1, r2
 80003fa:	0755      	lsls	r5, r2, #29
 80003fc:	d01c      	beq.n	8000438 <__aeabi_i2f+0x88>
 80003fe:	250f      	movs	r5, #15
 8000400:	402a      	ands	r2, r5
 8000402:	2a04      	cmp	r2, #4
 8000404:	d018      	beq.n	8000438 <__aeabi_i2f+0x88>
 8000406:	3104      	adds	r1, #4
 8000408:	08ca      	lsrs	r2, r1, #3
 800040a:	0149      	lsls	r1, r1, #5
 800040c:	d515      	bpl.n	800043a <__aeabi_i2f+0x8a>
 800040e:	239f      	movs	r3, #159	@ 0x9f
 8000410:	0252      	lsls	r2, r2, #9
 8000412:	1a18      	subs	r0, r3, r0
 8000414:	0a55      	lsrs	r5, r2, #9
 8000416:	b2c0      	uxtb	r0, r0
 8000418:	e7e3      	b.n	80003e2 <__aeabi_i2f+0x32>
 800041a:	2205      	movs	r2, #5
 800041c:	0029      	movs	r1, r5
 800041e:	1a12      	subs	r2, r2, r0
 8000420:	40d1      	lsrs	r1, r2
 8000422:	0002      	movs	r2, r0
 8000424:	321b      	adds	r2, #27
 8000426:	4095      	lsls	r5, r2
 8000428:	002a      	movs	r2, r5
 800042a:	1e55      	subs	r5, r2, #1
 800042c:	41aa      	sbcs	r2, r5
 800042e:	430a      	orrs	r2, r1
 8000430:	4906      	ldr	r1, [pc, #24]	@ (800044c <__aeabi_i2f+0x9c>)
 8000432:	4011      	ands	r1, r2
 8000434:	0755      	lsls	r5, r2, #29
 8000436:	d1e2      	bne.n	80003fe <__aeabi_i2f+0x4e>
 8000438:	08ca      	lsrs	r2, r1, #3
 800043a:	0252      	lsls	r2, r2, #9
 800043c:	0a55      	lsrs	r5, r2, #9
 800043e:	b2d8      	uxtb	r0, r3
 8000440:	e7cf      	b.n	80003e2 <__aeabi_i2f+0x32>
 8000442:	026d      	lsls	r5, r5, #9
 8000444:	0a6d      	lsrs	r5, r5, #9
 8000446:	308e      	adds	r0, #142	@ 0x8e
 8000448:	e7cb      	b.n	80003e2 <__aeabi_i2f+0x32>
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	fbffffff 	.word	0xfbffffff

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	@ (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <adxl_read>:
#define MULTI_BYTE_EN		0x40
#define READ_OPERATION		0x80


void adxl_read(uint8_t address, uint8_t* rxdata)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	0002      	movs	r2, r0
 8000494:	6039      	str	r1, [r7, #0]
 8000496:	1dfb      	adds	r3, r7, #7
 8000498:	701a      	strb	r2, [r3, #0]
	//set read operation
	address |= READ_OPERATION;
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2280      	movs	r2, #128	@ 0x80
 80004a0:	4252      	negs	r2, r2
 80004a2:	4313      	orrs	r3, r2
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	701a      	strb	r2, [r3, #0]
	//enable multi byte
	address |= MULTI_BYTE_EN;
 80004aa:	1dfb      	adds	r3, r7, #7
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2240      	movs	r2, #64	@ 0x40
 80004b0:	4313      	orrs	r3, r2
 80004b2:	b2da      	uxtb	r2, r3
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	701a      	strb	r2, [r3, #0]

	//pull cs low
	cs_enable();
 80004b8:	f000 fa3a 	bl	8000930 <cs_enable>
	// Small delay for CS settling
	for(volatile int i = 0; i < 10; i++);
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	e002      	b.n	80004c8 <adxl_read+0x3c>
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	3301      	adds	r3, #1
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	2b09      	cmp	r3, #9
 80004cc:	ddf9      	ble.n	80004c2 <adxl_read+0x36>

	//send address
	spi1_transmit(&address,1);
 80004ce:	1dfb      	adds	r3, r7, #7
 80004d0:	2101      	movs	r1, #1
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 f9be 	bl	8000854 <spi1_transmit>

	//read data 6 byte
	spi1_receive(rxdata, 6);
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	2106      	movs	r1, #6
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 f9fb 	bl	80008d8 <spi1_receive>


	//pull cs high
	cs_disable();
 80004e2:	f000 fa33 	bl	800094c <cs_disable>

}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b004      	add	sp, #16
 80004ec:	bd80      	pop	{r7, pc}

080004ee <adxl_write>:

void adxl_write(uint8_t address, uint8_t value)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b084      	sub	sp, #16
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	0002      	movs	r2, r0
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	701a      	strb	r2, [r3, #0]
 80004fa:	1dbb      	adds	r3, r7, #6
 80004fc:	1c0a      	adds	r2, r1, #0
 80004fe:	701a      	strb	r2, [r3, #0]
	//enable multi byte , place address into buffer
	//data[0] = address | MULTI_BYTE_EN;
	//data[1] = value;

	//pull cs low
	cs_enable();
 8000500:	f000 fa16 	bl	8000930 <cs_enable>
	// Small delay
	uint8_t addr = address & 0x3F;  // Clear multi-byte and read bits
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	223f      	movs	r2, #63	@ 0x3f
 800050a:	4013      	ands	r3, r2
 800050c:	b2da      	uxtb	r2, r3
 800050e:	210f      	movs	r1, #15
 8000510:	187b      	adds	r3, r7, r1
 8000512:	701a      	strb	r2, [r3, #0]
	spi1_transmit(&addr, 1);
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2101      	movs	r1, #1
 8000518:	0018      	movs	r0, r3
 800051a:	f000 f99b 	bl	8000854 <spi1_transmit>
	spi1_transmit(&value, 1);
 800051e:	1dbb      	adds	r3, r7, #6
 8000520:	2101      	movs	r1, #1
 8000522:	0018      	movs	r0, r3
 8000524:	f000 f996 	bl	8000854 <spi1_transmit>

	//pull cs high
	cs_disable();
 8000528:	f000 fa10 	bl	800094c <cs_disable>

	// Delay between writes
	for(volatile int i = 0; i < 1000; i++);
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	e002      	b.n	8000538 <adxl_write+0x4a>
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	3301      	adds	r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	23fa      	movs	r3, #250	@ 0xfa
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	429a      	cmp	r2, r3
 8000540:	dbf7      	blt.n	8000532 <adxl_write+0x44>

}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b004      	add	sp, #16
 800054a:	bd80      	pop	{r7, pc}

0800054c <adxl_init>:



void adxl_init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	//enable SPI GPIO
	spi_gpio_init();
 8000550:	f000 f87e 	bl	8000650 <spi_gpio_init>
	//config SPI
	spi1_config();
 8000554:	f000 f90a 	bl	800076c <spi1_config>

	//uint8_t devid;
	//adxl_read(DEVID_R, &devid);

	// set data format to +/- 4g
	adxl_write(DATA_FORMAT_R, FOUR_G);
 8000558:	2101      	movs	r1, #1
 800055a:	2031      	movs	r0, #49	@ 0x31
 800055c:	f7ff ffc7 	bl	80004ee <adxl_write>
	//reset all bits
	adxl_write(POWER_CTL_R, RESET);
 8000560:	2100      	movs	r1, #0
 8000562:	202d      	movs	r0, #45	@ 0x2d
 8000564:	f7ff ffc3 	bl	80004ee <adxl_write>
	//configure power mode
	adxl_write(POWER_CTL_R, SET_MEASURE_BIT);
 8000568:	2108      	movs	r1, #8
 800056a:	202d      	movs	r0, #45	@ 0x2d
 800056c:	f7ff ffbf 	bl	80004ee <adxl_write>


}
 8000570:	46c0      	nop			@ (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <main>:
int16_t x,y,z;
float xg, yg, zg;
uint8_t data_vals[6];

int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	adxl_init();
 800057c:	f7ff ffe6 	bl	800054c <adxl_init>


	while(1)
	{
		adxl_read(DATA_START_ADDR, data_vals);
 8000580:	4b2b      	ldr	r3, [pc, #172]	@ (8000630 <main+0xb8>)
 8000582:	0019      	movs	r1, r3
 8000584:	2032      	movs	r0, #50	@ 0x32
 8000586:	f7ff ff81 	bl	800048c <adxl_read>

		x = (int16_t) ((data_vals[1] << 8)  |  data_vals[0]);
 800058a:	4b29      	ldr	r3, [pc, #164]	@ (8000630 <main+0xb8>)
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	b21b      	sxth	r3, r3
 8000590:	021b      	lsls	r3, r3, #8
 8000592:	b21a      	sxth	r2, r3
 8000594:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <main+0xb8>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b21b      	sxth	r3, r3
 800059a:	4313      	orrs	r3, r2
 800059c:	b21a      	sxth	r2, r3
 800059e:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <main+0xbc>)
 80005a0:	801a      	strh	r2, [r3, #0]
		y = (int16_t) ((data_vals[3] << 8)  |  data_vals[2]);
 80005a2:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <main+0xb8>)
 80005a4:	78db      	ldrb	r3, [r3, #3]
 80005a6:	b21b      	sxth	r3, r3
 80005a8:	021b      	lsls	r3, r3, #8
 80005aa:	b21a      	sxth	r2, r3
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <main+0xb8>)
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	b21b      	sxth	r3, r3
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21a      	sxth	r2, r3
 80005b6:	4b20      	ldr	r3, [pc, #128]	@ (8000638 <main+0xc0>)
 80005b8:	801a      	strh	r2, [r3, #0]
		z = (int16_t) ((data_vals[5] << 8)  |  data_vals[4]);
 80005ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000630 <main+0xb8>)
 80005bc:	795b      	ldrb	r3, [r3, #5]
 80005be:	b21b      	sxth	r3, r3
 80005c0:	021b      	lsls	r3, r3, #8
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <main+0xb8>)
 80005c6:	791b      	ldrb	r3, [r3, #4]
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b21a      	sxth	r2, r3
 80005ce:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <main+0xc4>)
 80005d0:	801a      	strh	r2, [r3, #0]

		xg = (x * 0.0078f);
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <main+0xbc>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	5e9b      	ldrsh	r3, [r3, r2]
 80005d8:	0018      	movs	r0, r3
 80005da:	f7ff fee9 	bl	80003b0 <__aeabi_i2f>
 80005de:	1c03      	adds	r3, r0, #0
 80005e0:	4917      	ldr	r1, [pc, #92]	@ (8000640 <main+0xc8>)
 80005e2:	1c18      	adds	r0, r3, #0
 80005e4:	f7ff fd8a 	bl	80000fc <__aeabi_fmul>
 80005e8:	1c03      	adds	r3, r0, #0
 80005ea:	1c1a      	adds	r2, r3, #0
 80005ec:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <main+0xcc>)
 80005ee:	601a      	str	r2, [r3, #0]
		yg = (y * 0.0078f);
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <main+0xc0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	5e9b      	ldrsh	r3, [r3, r2]
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff feda 	bl	80003b0 <__aeabi_i2f>
 80005fc:	1c03      	adds	r3, r0, #0
 80005fe:	4910      	ldr	r1, [pc, #64]	@ (8000640 <main+0xc8>)
 8000600:	1c18      	adds	r0, r3, #0
 8000602:	f7ff fd7b 	bl	80000fc <__aeabi_fmul>
 8000606:	1c03      	adds	r3, r0, #0
 8000608:	1c1a      	adds	r2, r3, #0
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <main+0xd0>)
 800060c:	601a      	str	r2, [r3, #0]
		zg = (z * 0.0078f);
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <main+0xc4>)
 8000610:	2200      	movs	r2, #0
 8000612:	5e9b      	ldrsh	r3, [r3, r2]
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff fecb 	bl	80003b0 <__aeabi_i2f>
 800061a:	1c03      	adds	r3, r0, #0
 800061c:	4908      	ldr	r1, [pc, #32]	@ (8000640 <main+0xc8>)
 800061e:	1c18      	adds	r0, r3, #0
 8000620:	f7ff fd6c 	bl	80000fc <__aeabi_fmul>
 8000624:	1c03      	adds	r3, r0, #0
 8000626:	1c1a      	adds	r2, r3, #0
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <main+0xd4>)
 800062a:	601a      	str	r2, [r3, #0]
		adxl_read(DATA_START_ADDR, data_vals);
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	e7a7      	b.n	8000580 <main+0x8>
 8000630:	20000030 	.word	0x20000030
 8000634:	2000001c 	.word	0x2000001c
 8000638:	2000001e 	.word	0x2000001e
 800063c:	20000020 	.word	0x20000020
 8000640:	3bff9724 	.word	0x3bff9724
 8000644:	20000024 	.word	0x20000024
 8000648:	20000028 	.word	0x20000028
 800064c:	2000002c 	.word	0x2000002c

08000650 <spi_gpio_init>:
//SCK   PA5
//MISO  PA6
//MOSI  PA7
//AF0
void spi_gpio_init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

	RCC->IOPENR |= GPIOAEN;
 8000654:	4b3e      	ldr	r3, [pc, #248]	@ (8000750 <spi_gpio_init+0x100>)
 8000656:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000658:	4b3d      	ldr	r3, [pc, #244]	@ (8000750 <spi_gpio_init+0x100>)
 800065a:	2101      	movs	r1, #1
 800065c:	430a      	orrs	r2, r1
 800065e:	635a      	str	r2, [r3, #52]	@ 0x34
	RCC->IOPENR |= GPIOBEN;
 8000660:	4b3b      	ldr	r3, [pc, #236]	@ (8000750 <spi_gpio_init+0x100>)
 8000662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000664:	4b3a      	ldr	r3, [pc, #232]	@ (8000750 <spi_gpio_init+0x100>)
 8000666:	2102      	movs	r1, #2
 8000668:	430a      	orrs	r2, r1
 800066a:	635a      	str	r2, [r3, #52]	@ 0x34


	//AF0
	GPIOA->MODER &= ~(1U<<10);
 800066c:	23a0      	movs	r3, #160	@ 0xa0
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	23a0      	movs	r3, #160	@ 0xa0
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	4937      	ldr	r1, [pc, #220]	@ (8000754 <spi_gpio_init+0x104>)
 8000678:	400a      	ands	r2, r1
 800067a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<11);
 800067c:	23a0      	movs	r3, #160	@ 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	23a0      	movs	r3, #160	@ 0xa0
 8000684:	05db      	lsls	r3, r3, #23
 8000686:	2180      	movs	r1, #128	@ 0x80
 8000688:	0109      	lsls	r1, r1, #4
 800068a:	430a      	orrs	r2, r1
 800068c:	601a      	str	r2, [r3, #0]

	GPIOA->MODER &= ~(1U<<12);
 800068e:	23a0      	movs	r3, #160	@ 0xa0
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	23a0      	movs	r3, #160	@ 0xa0
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	492f      	ldr	r1, [pc, #188]	@ (8000758 <spi_gpio_init+0x108>)
 800069a:	400a      	ands	r2, r1
 800069c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<13);
 800069e:	23a0      	movs	r3, #160	@ 0xa0
 80006a0:	05db      	lsls	r3, r3, #23
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	23a0      	movs	r3, #160	@ 0xa0
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	2180      	movs	r1, #128	@ 0x80
 80006aa:	0189      	lsls	r1, r1, #6
 80006ac:	430a      	orrs	r2, r1
 80006ae:	601a      	str	r2, [r3, #0]

	GPIOA->MODER &= ~(1U<<14);
 80006b0:	23a0      	movs	r3, #160	@ 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	23a0      	movs	r3, #160	@ 0xa0
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	4928      	ldr	r1, [pc, #160]	@ (800075c <spi_gpio_init+0x10c>)
 80006bc:	400a      	ands	r2, r1
 80006be:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<15);
 80006c0:	23a0      	movs	r3, #160	@ 0xa0
 80006c2:	05db      	lsls	r3, r3, #23
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	23a0      	movs	r3, #160	@ 0xa0
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	2180      	movs	r1, #128	@ 0x80
 80006cc:	0209      	lsls	r1, r1, #8
 80006ce:	430a      	orrs	r2, r1
 80006d0:	601a      	str	r2, [r3, #0]


	//cs output pin
	GPIOB->MODER &= ~(3U << 0);
 80006d2:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <spi_gpio_init+0x110>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <spi_gpio_init+0x110>)
 80006d8:	2103      	movs	r1, #3
 80006da:	438a      	bics	r2, r1
 80006dc:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U << 0);
 80006de:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <spi_gpio_init+0x110>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <spi_gpio_init+0x110>)
 80006e4:	2101      	movs	r1, #1
 80006e6:	430a      	orrs	r2, r1
 80006e8:	601a      	str	r2, [r3, #0]

	GPIOA->AFR[0] &= ~(0xF << (5 * 4));  // Clear AF for PA5
 80006ea:	23a0      	movs	r3, #160	@ 0xa0
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	6a1a      	ldr	r2, [r3, #32]
 80006f0:	23a0      	movs	r3, #160	@ 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	491b      	ldr	r1, [pc, #108]	@ (8000764 <spi_gpio_init+0x114>)
 80006f6:	400a      	ands	r2, r1
 80006f8:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (0x0 << (5 * 4));   // AF0
 80006fa:	23a0      	movs	r3, #160	@ 0xa0
 80006fc:	05da      	lsls	r2, r3, #23
 80006fe:	23a0      	movs	r3, #160	@ 0xa0
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	6a12      	ldr	r2, [r2, #32]
 8000704:	621a      	str	r2, [r3, #32]

	GPIOA->AFR[0] &= ~(0xF << (6 * 4));  // Clear AF for PA6
 8000706:	23a0      	movs	r3, #160	@ 0xa0
 8000708:	05db      	lsls	r3, r3, #23
 800070a:	6a1a      	ldr	r2, [r3, #32]
 800070c:	23a0      	movs	r3, #160	@ 0xa0
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	4915      	ldr	r1, [pc, #84]	@ (8000768 <spi_gpio_init+0x118>)
 8000712:	400a      	ands	r2, r1
 8000714:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (0x0 << (6 * 4));   // AF0
 8000716:	23a0      	movs	r3, #160	@ 0xa0
 8000718:	05da      	lsls	r2, r3, #23
 800071a:	23a0      	movs	r3, #160	@ 0xa0
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	6a12      	ldr	r2, [r2, #32]
 8000720:	621a      	str	r2, [r3, #32]

	GPIOA->AFR[0] &= ~(0xF << (7 * 4));  // Clear AF for PA7
 8000722:	23a0      	movs	r3, #160	@ 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	6a1a      	ldr	r2, [r3, #32]
 8000728:	23a0      	movs	r3, #160	@ 0xa0
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	0112      	lsls	r2, r2, #4
 800072e:	0912      	lsrs	r2, r2, #4
 8000730:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (0x0 << (7 * 4));   // AF0
 8000732:	23a0      	movs	r3, #160	@ 0xa0
 8000734:	05da      	lsls	r2, r3, #23
 8000736:	23a0      	movs	r3, #160	@ 0xa0
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	6a12      	ldr	r2, [r2, #32]
 800073c:	621a      	str	r2, [r3, #32]

	// Set CS high initially (idle state)
	GPIOB->ODR |= (1U << 0);
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <spi_gpio_init+0x110>)
 8000740:	695a      	ldr	r2, [r3, #20]
 8000742:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <spi_gpio_init+0x110>)
 8000744:	2101      	movs	r1, #1
 8000746:	430a      	orrs	r2, r1
 8000748:	615a      	str	r2, [r3, #20]



}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	fffffbff 	.word	0xfffffbff
 8000758:	ffffefff 	.word	0xffffefff
 800075c:	ffffbfff 	.word	0xffffbfff
 8000760:	50000400 	.word	0x50000400
 8000764:	ff0fffff 	.word	0xff0fffff
 8000768:	f0ffffff 	.word	0xf0ffffff

0800076c <spi1_config>:

void spi1_config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	RCC->APBENR2 |= SPI1EN;
 8000770:	4b33      	ldr	r3, [pc, #204]	@ (8000840 <spi1_config+0xd4>)
 8000772:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000774:	4b32      	ldr	r3, [pc, #200]	@ (8000840 <spi1_config+0xd4>)
 8000776:	2180      	movs	r1, #128	@ 0x80
 8000778:	0149      	lsls	r1, r1, #5
 800077a:	430a      	orrs	r2, r1
 800077c:	641a      	str	r2, [r3, #64]	@ 0x40
	// Disable SPI before configuration
	SPI1->CR1 &= ~(1U << 6);
 800077e:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <spi1_config+0xd8>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b30      	ldr	r3, [pc, #192]	@ (8000844 <spi1_config+0xd8>)
 8000784:	2140      	movs	r1, #64	@ 0x40
 8000786:	438a      	bics	r2, r1
 8000788:	601a      	str	r2, [r3, #0]


	// For 48MHz, BR = 011 gives 48MHz/16 = 3MHz (safe for ADXL345)
	SPI1->CR1 &= ~(7U << 3);  // Clear BR bits
 800078a:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <spi1_config+0xd8>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b2d      	ldr	r3, [pc, #180]	@ (8000844 <spi1_config+0xd8>)
 8000790:	2138      	movs	r1, #56	@ 0x38
 8000792:	438a      	bics	r2, r1
 8000794:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= (3U << 3);   // BR = 011 (divide by 16)
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <spi1_config+0xd8>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4b2a      	ldr	r3, [pc, #168]	@ (8000844 <spi1_config+0xd8>)
 800079c:	2118      	movs	r1, #24
 800079e:	430a      	orrs	r2, r1
 80007a0:	601a      	str	r2, [r3, #0]

	SPI1->CR1 |= SPI_CPOL;
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <spi1_config+0xd8>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b27      	ldr	r3, [pc, #156]	@ (8000844 <spi1_config+0xd8>)
 80007a8:	2102      	movs	r1, #2
 80007aa:	430a      	orrs	r2, r1
 80007ac:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CPHA;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <spi1_config+0xd8>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <spi1_config+0xd8>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	430a      	orrs	r2, r1
 80007b8:	601a      	str	r2, [r3, #0]

	//MSB first
	SPI1->CR1 &= ~ (1U << 7);
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <spi1_config+0xd8>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <spi1_config+0xd8>)
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	438a      	bics	r2, r1
 80007c4:	601a      	str	r2, [r3, #0]

	SPI1->CR1 |= SPI_MASTER;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <spi1_config+0xd8>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000844 <spi1_config+0xd8>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	430a      	orrs	r2, r1
 80007d0:	601a      	str	r2, [r3, #0]


	//internal slave select
	SPI1->CR1 |= (1U << 8);
 80007d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <spi1_config+0xd8>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <spi1_config+0xd8>)
 80007d8:	2180      	movs	r1, #128	@ 0x80
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	430a      	orrs	r2, r1
 80007de:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= (1U << 9);
 80007e0:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <spi1_config+0xd8>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <spi1_config+0xd8>)
 80007e6:	2180      	movs	r1, #128	@ 0x80
 80007e8:	0089      	lsls	r1, r1, #2
 80007ea:	430a      	orrs	r2, r1
 80007ec:	601a      	str	r2, [r3, #0]

	// Full-duplex mode (BIDIMODE = 0, RXONLY = 0)
	SPI1->CR1 &= ~(1U << 15);  // Clear BIDIMODE (full duplex)
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <spi1_config+0xd8>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <spi1_config+0xd8>)
 80007f4:	4914      	ldr	r1, [pc, #80]	@ (8000848 <spi1_config+0xdc>)
 80007f6:	400a      	ands	r2, r1
 80007f8:	601a      	str	r2, [r3, #0]
	SPI1->CR1 &= ~(1U << 10);  // Clear RXONLY
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <spi1_config+0xd8>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <spi1_config+0xd8>)
 8000800:	4912      	ldr	r1, [pc, #72]	@ (800084c <spi1_config+0xe0>)
 8000802:	400a      	ands	r2, r1
 8000804:	601a      	str	r2, [r3, #0]



	// Configure data size to 8-bit (DS[3:0] = 0111)
	SPI1->CR2 &= ~(0xF << 8);   // Clear DS bits
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <spi1_config+0xd8>)
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <spi1_config+0xd8>)
 800080c:	4910      	ldr	r1, [pc, #64]	@ (8000850 <spi1_config+0xe4>)
 800080e:	400a      	ands	r2, r1
 8000810:	605a      	str	r2, [r3, #4]
	SPI1->CR2 |= (0x7 << 8);    // DS = 0111 for 8-bit
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <spi1_config+0xd8>)
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <spi1_config+0xd8>)
 8000818:	21e0      	movs	r1, #224	@ 0xe0
 800081a:	00c9      	lsls	r1, r1, #3
 800081c:	430a      	orrs	r2, r1
 800081e:	605a      	str	r2, [r3, #4]

	// Set FRXTH for 8-bit mode (FIFO threshold)
	SPI1->CR2 |= (1U << 12);    // FRXTH = 1 for 8-bit
 8000820:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <spi1_config+0xd8>)
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <spi1_config+0xd8>)
 8000826:	2180      	movs	r1, #128	@ 0x80
 8000828:	0149      	lsls	r1, r1, #5
 800082a:	430a      	orrs	r2, r1
 800082c:	605a      	str	r2, [r3, #4]

	//peripheral enable
	SPI1->CR1 |= (1U << 6);
 800082e:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <spi1_config+0xd8>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <spi1_config+0xd8>)
 8000834:	2140      	movs	r1, #64	@ 0x40
 8000836:	430a      	orrs	r2, r1
 8000838:	601a      	str	r2, [r3, #0]


}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	40013000 	.word	0x40013000
 8000848:	ffff7fff 	.word	0xffff7fff
 800084c:	fffffbff 	.word	0xfffffbff
 8000850:	fffff0ff 	.word	0xfffff0ff

08000854 <spi1_transmit>:

void spi1_transmit(uint8_t *data, uint32_t size)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	uint32_t i=0;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
	uint8_t temp;

	while(i<size)
 8000862:	e016      	b.n	8000892 <spi1_transmit+0x3e>
	{
		//wait for TXE
		while(!(SPI1->SR & SPI_TXE)){}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <spi1_transmit+0x78>)
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	2202      	movs	r2, #2
 800086c:	4013      	ands	r3, r2
 800086e:	d0fa      	beq.n	8000866 <spi1_transmit+0x12>

		//write data to data reg
		*((volatile uint8_t*)&SPI1->DR) = data[i];
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	18d3      	adds	r3, r2, r3
 8000876:	4a16      	ldr	r2, [pc, #88]	@ (80008d0 <spi1_transmit+0x7c>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	7013      	strb	r3, [r2, #0]
		i++;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	3301      	adds	r3, #1
 8000880:	60fb      	str	r3, [r7, #12]


		// Read received byte to prevent RXNE from filling up
		while(!(SPI1->SR & SPI_RXNE)) {}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <spi1_transmit+0x78>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	2201      	movs	r2, #1
 800088a:	4013      	ands	r3, r2
 800088c:	d0fa      	beq.n	8000884 <spi1_transmit+0x30>
		(void)*((volatile uint8_t*)&SPI1->DR);  // Discard received data
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <spi1_transmit+0x7c>)
 8000890:	781b      	ldrb	r3, [r3, #0]
	while(i<size)
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	429a      	cmp	r2, r3
 8000898:	d3e4      	bcc.n	8000864 <spi1_transmit+0x10>


	}

	//wait again for TXE
	while(!(SPI1->SR & SPI_TXE)){}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <spi1_transmit+0x78>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	2202      	movs	r2, #2
 80008a2:	4013      	ands	r3, r2
 80008a4:	d0fa      	beq.n	800089c <spi1_transmit+0x48>
	//wait for busy
	while((SPI1->SR & SPI_BUSY)){}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <spi1_transmit+0x78>)
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	4013      	ands	r3, r2
 80008b0:	d1fa      	bne.n	80008a8 <spi1_transmit+0x54>

	// Wait until RXNE


	//clear overrun flag
	temp = *((volatile uint8_t*)&SPI1->DR);
 80008b2:	4a07      	ldr	r2, [pc, #28]	@ (80008d0 <spi1_transmit+0x7c>)
 80008b4:	210b      	movs	r1, #11
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	7812      	ldrb	r2, [r2, #0]
 80008ba:	701a      	strb	r2, [r3, #0]
	temp = *((volatile uint8_t*)&SPI1->SR);
 80008bc:	4a05      	ldr	r2, [pc, #20]	@ (80008d4 <spi1_transmit+0x80>)
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	7812      	ldrb	r2, [r2, #0]
 80008c2:	701a      	strb	r2, [r3, #0]

	//while (!(SPI1->SR & SPI_SR_RXNE)) {}
	//uint8_t dummy = (uint8_t)SPI1->DR;
}
 80008c4:	46c0      	nop			@ (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b004      	add	sp, #16
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40013000 	.word	0x40013000
 80008d0:	4001300c 	.word	0x4001300c
 80008d4:	40013008 	.word	0x40013008

080008d8 <spi1_receive>:


void spi1_receive(uint8_t *data, uint32_t size)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
	while(size)
 80008e2:	e018      	b.n	8000916 <spi1_receive+0x3e>
	{
		while(!(SPI1->SR & SPI_TXE)) {}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <spi1_receive+0x50>)
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	2202      	movs	r2, #2
 80008ec:	4013      	ands	r3, r2
 80008ee:	d0fa      	beq.n	80008e6 <spi1_receive+0xe>
		//send dummy data
		*((volatile uint8_t*)&SPI1->DR) = 0xFF;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <spi1_receive+0x54>)
 80008f2:	22ff      	movs	r2, #255	@ 0xff
 80008f4:	701a      	strb	r2, [r3, #0]
		//wait for RXNE
		while(!(SPI1->SR & SPI_RXNE)){}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <spi1_receive+0x50>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	2201      	movs	r2, #1
 80008fe:	4013      	ands	r3, r2
 8000900:	d0fa      	beq.n	80008f8 <spi1_receive+0x20>

		//Read data
		*data++ = *((volatile uint8_t*)&SPI1->DR);
 8000902:	490a      	ldr	r1, [pc, #40]	@ (800092c <spi1_receive+0x54>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	780a      	ldrb	r2, [r1, #0]
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	701a      	strb	r2, [r3, #0]
		size--;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	3b01      	subs	r3, #1
 8000914:	603b      	str	r3, [r7, #0]
	while(size)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1e3      	bne.n	80008e4 <spi1_receive+0xc>
	}
}
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	40013000 	.word	0x40013000
 800092c:	4001300c 	.word	0x4001300c

08000930 <cs_enable>:

void cs_enable(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	//cs PB0
	GPIOB->ODR &= ~(1U<<0);
 8000934:	4b04      	ldr	r3, [pc, #16]	@ (8000948 <cs_enable+0x18>)
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <cs_enable+0x18>)
 800093a:	2101      	movs	r1, #1
 800093c:	438a      	bics	r2, r1
 800093e:	615a      	str	r2, [r3, #20]

}
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	50000400 	.word	0x50000400

0800094c <cs_disable>:

void cs_disable(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	//cs   PB0
	GPIOB->ODR |= (1U<<0);
 8000950:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <cs_disable+0x18>)
 8000952:	695a      	ldr	r2, [r3, #20]
 8000954:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <cs_disable+0x18>)
 8000956:	2101      	movs	r1, #1
 8000958:	430a      	orrs	r2, r1
 800095a:	615a      	str	r2, [r3, #20]

}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	50000400 	.word	0x50000400

08000968 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000968:	480d      	ldr	r0, [pc, #52]	@ (80009a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800096a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800096c:	e000      	b.n	8000970 <Reset_Handler+0x8>
 800096e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000972:	490d      	ldr	r1, [pc, #52]	@ (80009a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000974:	4a0d      	ldr	r2, [pc, #52]	@ (80009ac <LoopForever+0xe>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000988:	4c0a      	ldr	r4, [pc, #40]	@ (80009b4 <LoopForever+0x16>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000996:	f000 f811 	bl	80009bc <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800099a:	f7ff fded 	bl	8000578 <main>

0800099e <LoopForever>:

LoopForever:
  b LoopForever
 800099e:	e7fe      	b.n	800099e <LoopForever>
  ldr   r0, =_estack
 80009a0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009ac:	08000a24 	.word	0x08000a24
  ldr r2, =_sbss
 80009b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009b4:	20000038 	.word	0x20000038

080009b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC_IRQHandler>
	...

080009bc <__libc_init_array>:
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	2600      	movs	r6, #0
 80009c0:	4c0c      	ldr	r4, [pc, #48]	@ (80009f4 <__libc_init_array+0x38>)
 80009c2:	4d0d      	ldr	r5, [pc, #52]	@ (80009f8 <__libc_init_array+0x3c>)
 80009c4:	1b64      	subs	r4, r4, r5
 80009c6:	10a4      	asrs	r4, r4, #2
 80009c8:	42a6      	cmp	r6, r4
 80009ca:	d109      	bne.n	80009e0 <__libc_init_array+0x24>
 80009cc:	2600      	movs	r6, #0
 80009ce:	f000 f819 	bl	8000a04 <_init>
 80009d2:	4c0a      	ldr	r4, [pc, #40]	@ (80009fc <__libc_init_array+0x40>)
 80009d4:	4d0a      	ldr	r5, [pc, #40]	@ (8000a00 <__libc_init_array+0x44>)
 80009d6:	1b64      	subs	r4, r4, r5
 80009d8:	10a4      	asrs	r4, r4, #2
 80009da:	42a6      	cmp	r6, r4
 80009dc:	d105      	bne.n	80009ea <__libc_init_array+0x2e>
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	00b3      	lsls	r3, r6, #2
 80009e2:	58eb      	ldr	r3, [r5, r3]
 80009e4:	4798      	blx	r3
 80009e6:	3601      	adds	r6, #1
 80009e8:	e7ee      	b.n	80009c8 <__libc_init_array+0xc>
 80009ea:	00b3      	lsls	r3, r6, #2
 80009ec:	58eb      	ldr	r3, [r5, r3]
 80009ee:	4798      	blx	r3
 80009f0:	3601      	adds	r6, #1
 80009f2:	e7f2      	b.n	80009da <__libc_init_array+0x1e>
 80009f4:	08000a1c 	.word	0x08000a1c
 80009f8:	08000a1c 	.word	0x08000a1c
 80009fc:	08000a20 	.word	0x08000a20
 8000a00:	08000a1c 	.word	0x08000a1c

08000a04 <_init>:
 8000a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a0a:	bc08      	pop	{r3}
 8000a0c:	469e      	mov	lr, r3
 8000a0e:	4770      	bx	lr

08000a10 <_fini>:
 8000a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a16:	bc08      	pop	{r3}
 8000a18:	469e      	mov	lr, r3
 8000a1a:	4770      	bx	lr
