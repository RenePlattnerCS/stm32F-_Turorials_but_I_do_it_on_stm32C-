
15_Timer_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f4  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002a8  080002b0  000012b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002a8  080002a8  000012b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080002a8  080002a8  000012b0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080002a8  080002b0  000012b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002a8  080002a8  000012a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002b0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002b0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a77  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000266  00000000  00000000  00001d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005f  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000dc9  00000000  00000000  000020a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e79  00000000  00000000  00002e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003fe52  00000000  00000000  00003ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00043b3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000114  00000000  00000000  00043b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00043c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000000 	.word	0x20000000
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08000290 	.word	0x08000290

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000004 	.word	0x20000004
 80000f8:	08000290 	.word	0x08000290

080000fc <main>:
#define LED_PIN				PIN5

int timestamp = 0;

int main(void)
{
 80000fc:	b580      	push	{r7, lr}
 80000fe:	af00      	add	r7, sp, #0

	RCC->IOPENR |= GPIOAEN;
 8000100:	4b0d      	ldr	r3, [pc, #52]	@ (8000138 <main+0x3c>)
 8000102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000104:	4b0c      	ldr	r3, [pc, #48]	@ (8000138 <main+0x3c>)
 8000106:	2101      	movs	r1, #1
 8000108:	430a      	orrs	r2, r1
 800010a:	635a      	str	r2, [r3, #52]	@ 0x34
	GPIOA->MODER |= (1U << 10);
 800010c:	23a0      	movs	r3, #160	@ 0xa0
 800010e:	05db      	lsls	r3, r3, #23
 8000110:	681a      	ldr	r2, [r3, #0]
 8000112:	23a0      	movs	r3, #160	@ 0xa0
 8000114:	05db      	lsls	r3, r3, #23
 8000116:	2180      	movs	r1, #128	@ 0x80
 8000118:	00c9      	lsls	r1, r1, #3
 800011a:	430a      	orrs	r2, r1
 800011c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1U << 11);
 800011e:	23a0      	movs	r3, #160	@ 0xa0
 8000120:	05db      	lsls	r3, r3, #23
 8000122:	681a      	ldr	r2, [r3, #0]
 8000124:	23a0      	movs	r3, #160	@ 0xa0
 8000126:	05db      	lsls	r3, r3, #23
 8000128:	4904      	ldr	r1, [pc, #16]	@ (800013c <main+0x40>)
 800012a:	400a      	ands	r2, r1
 800012c:	601a      	str	r2, [r3, #0]

	tim1_1hz_interrupt();
 800012e:	f000 f837 	bl	80001a0 <tim1_1hz_interrupt>

	while(1)
 8000132:	46c0      	nop			@ (mov r8, r8)
 8000134:	e7fd      	b.n	8000132 <main+0x36>
 8000136:	46c0      	nop			@ (mov r8, r8)
 8000138:	40021000 	.word	0x40021000
 800013c:	fffff7ff 	.word	0xfffff7ff

08000140 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
	}

}

void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000140:	b580      	push	{r7, lr}
 8000142:	af00      	add	r7, sp, #0
	// clear UIF in status reg
	TIM1->SR &= ~SR_UIF;
 8000144:	4b08      	ldr	r3, [pc, #32]	@ (8000168 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x28>)
 8000146:	691a      	ldr	r2, [r3, #16]
 8000148:	4b07      	ldr	r3, [pc, #28]	@ (8000168 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x28>)
 800014a:	2101      	movs	r1, #1
 800014c:	438a      	bics	r2, r1
 800014e:	611a      	str	r2, [r3, #16]
	GPIOA->ODR ^=LED_PIN;
 8000150:	23a0      	movs	r3, #160	@ 0xa0
 8000152:	05db      	lsls	r3, r3, #23
 8000154:	695a      	ldr	r2, [r3, #20]
 8000156:	23a0      	movs	r3, #160	@ 0xa0
 8000158:	05db      	lsls	r3, r3, #23
 800015a:	2120      	movs	r1, #32
 800015c:	404a      	eors	r2, r1
 800015e:	615a      	str	r2, [r3, #20]

}
 8000160:	46c0      	nop			@ (mov r8, r8)
 8000162:	46bd      	mov	sp, r7
 8000164:	bd80      	pop	{r7, pc}
 8000166:	46c0      	nop			@ (mov r8, r8)
 8000168:	40012c00 	.word	0x40012c00

0800016c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
 8000172:	0002      	movs	r2, r0
 8000174:	1dfb      	adds	r3, r7, #7
 8000176:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000178:	1dfb      	adds	r3, r7, #7
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b7f      	cmp	r3, #127	@ 0x7f
 800017e:	d809      	bhi.n	8000194 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000180:	1dfb      	adds	r3, r7, #7
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	001a      	movs	r2, r3
 8000186:	231f      	movs	r3, #31
 8000188:	401a      	ands	r2, r3
 800018a:	4b04      	ldr	r3, [pc, #16]	@ (800019c <__NVIC_EnableIRQ+0x30>)
 800018c:	2101      	movs	r1, #1
 800018e:	4091      	lsls	r1, r2
 8000190:	000a      	movs	r2, r1
 8000192:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000194:	46c0      	nop			@ (mov r8, r8)
 8000196:	46bd      	mov	sp, r7
 8000198:	b002      	add	sp, #8
 800019a:	bd80      	pop	{r7, pc}
 800019c:	e000e100 	.word	0xe000e100

080001a0 <tim1_1hz_interrupt>:
	//TIM1->BDTR |= TIM_BDTR_MOE;

}

void tim1_1hz_interrupt(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	//enable clock to timer 1
	RCC->APBENR2 |= TIM1EN;
 80001a4:	4b0f      	ldr	r3, [pc, #60]	@ (80001e4 <tim1_1hz_interrupt+0x44>)
 80001a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80001a8:	4b0e      	ldr	r3, [pc, #56]	@ (80001e4 <tim1_1hz_interrupt+0x44>)
 80001aa:	2180      	movs	r1, #128	@ 0x80
 80001ac:	0109      	lsls	r1, r1, #4
 80001ae:	430a      	orrs	r2, r1
 80001b0:	641a      	str	r2, [r3, #64]	@ 0x40
	//set prescaler
	TIM1->PSC = 1600 - 1;
 80001b2:	4b0d      	ldr	r3, [pc, #52]	@ (80001e8 <tim1_1hz_interrupt+0x48>)
 80001b4:	4a0d      	ldr	r2, [pc, #52]	@ (80001ec <tim1_1hz_interrupt+0x4c>)
 80001b6:	629a      	str	r2, [r3, #40]	@ 0x28

	// set auto reaload
	TIM1->ARR = 10000 -1;
 80001b8:	4b0b      	ldr	r3, [pc, #44]	@ (80001e8 <tim1_1hz_interrupt+0x48>)
 80001ba:	4a0d      	ldr	r2, [pc, #52]	@ (80001f0 <tim1_1hz_interrupt+0x50>)
 80001bc:	62da      	str	r2, [r3, #44]	@ 0x2c

	//clear counter
	TIM1->CNT = 0;
 80001be:	4b0a      	ldr	r3, [pc, #40]	@ (80001e8 <tim1_1hz_interrupt+0x48>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	625a      	str	r2, [r3, #36]	@ 0x24
	//enable timer


	TIM1->CR1 = CR1_CEN;
 80001c4:	4b08      	ldr	r3, [pc, #32]	@ (80001e8 <tim1_1hz_interrupt+0x48>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	601a      	str	r2, [r3, #0]


	//enable interrupts for TIM
	TIM1->DIER |= DIER_UIE;
 80001ca:	4b07      	ldr	r3, [pc, #28]	@ (80001e8 <tim1_1hz_interrupt+0x48>)
 80001cc:	68da      	ldr	r2, [r3, #12]
 80001ce:	4b06      	ldr	r3, [pc, #24]	@ (80001e8 <tim1_1hz_interrupt+0x48>)
 80001d0:	2101      	movs	r1, #1
 80001d2:	430a      	orrs	r2, r1
 80001d4:	60da      	str	r2, [r3, #12]

	//enable NVIC interrupt
	NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80001d6:	200d      	movs	r0, #13
 80001d8:	f7ff ffc8 	bl	800016c <__NVIC_EnableIRQ>


}
 80001dc:	46c0      	nop			@ (mov r8, r8)
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	46c0      	nop			@ (mov r8, r8)
 80001e4:	40021000 	.word	0x40021000
 80001e8:	40012c00 	.word	0x40012c00
 80001ec:	0000063f 	.word	0x0000063f
 80001f0:	0000270f 	.word	0x0000270f

080001f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001f4:	480d      	ldr	r0, [pc, #52]	@ (800022c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001f8:	e000      	b.n	80001fc <Reset_Handler+0x8>
 80001fa:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001fc:	480c      	ldr	r0, [pc, #48]	@ (8000230 <LoopForever+0x6>)
  ldr r1, =_edata
 80001fe:	490d      	ldr	r1, [pc, #52]	@ (8000234 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000200:	4a0d      	ldr	r2, [pc, #52]	@ (8000238 <LoopForever+0xe>)
  movs r3, #0
 8000202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000204:	e002      	b.n	800020c <LoopCopyDataInit>

08000206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800020a:	3304      	adds	r3, #4

0800020c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800020c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800020e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000210:	d3f9      	bcc.n	8000206 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000212:	4a0a      	ldr	r2, [pc, #40]	@ (800023c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000214:	4c0a      	ldr	r4, [pc, #40]	@ (8000240 <LoopForever+0x16>)
  movs r3, #0
 8000216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000218:	e001      	b.n	800021e <LoopFillZerobss>

0800021a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800021a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800021c:	3204      	adds	r2, #4

0800021e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800021e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000220:	d3fb      	bcc.n	800021a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000222:	f000 f811 	bl	8000248 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000226:	f7ff ff69 	bl	80000fc <main>

0800022a <LoopForever>:

LoopForever:
  b LoopForever
 800022a:	e7fe      	b.n	800022a <LoopForever>
  ldr   r0, =_estack
 800022c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000234:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000238:	080002b0 	.word	0x080002b0
  ldr r2, =_sbss
 800023c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000240:	2000001c 	.word	0x2000001c

08000244 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000244:	e7fe      	b.n	8000244 <ADC_IRQHandler>
	...

08000248 <__libc_init_array>:
 8000248:	b570      	push	{r4, r5, r6, lr}
 800024a:	2600      	movs	r6, #0
 800024c:	4c0c      	ldr	r4, [pc, #48]	@ (8000280 <__libc_init_array+0x38>)
 800024e:	4d0d      	ldr	r5, [pc, #52]	@ (8000284 <__libc_init_array+0x3c>)
 8000250:	1b64      	subs	r4, r4, r5
 8000252:	10a4      	asrs	r4, r4, #2
 8000254:	42a6      	cmp	r6, r4
 8000256:	d109      	bne.n	800026c <__libc_init_array+0x24>
 8000258:	2600      	movs	r6, #0
 800025a:	f000 f819 	bl	8000290 <_init>
 800025e:	4c0a      	ldr	r4, [pc, #40]	@ (8000288 <__libc_init_array+0x40>)
 8000260:	4d0a      	ldr	r5, [pc, #40]	@ (800028c <__libc_init_array+0x44>)
 8000262:	1b64      	subs	r4, r4, r5
 8000264:	10a4      	asrs	r4, r4, #2
 8000266:	42a6      	cmp	r6, r4
 8000268:	d105      	bne.n	8000276 <__libc_init_array+0x2e>
 800026a:	bd70      	pop	{r4, r5, r6, pc}
 800026c:	00b3      	lsls	r3, r6, #2
 800026e:	58eb      	ldr	r3, [r5, r3]
 8000270:	4798      	blx	r3
 8000272:	3601      	adds	r6, #1
 8000274:	e7ee      	b.n	8000254 <__libc_init_array+0xc>
 8000276:	00b3      	lsls	r3, r6, #2
 8000278:	58eb      	ldr	r3, [r5, r3]
 800027a:	4798      	blx	r3
 800027c:	3601      	adds	r6, #1
 800027e:	e7f2      	b.n	8000266 <__libc_init_array+0x1e>
 8000280:	080002a8 	.word	0x080002a8
 8000284:	080002a8 	.word	0x080002a8
 8000288:	080002ac 	.word	0x080002ac
 800028c:	080002a8 	.word	0x080002a8

08000290 <_init>:
 8000290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000292:	46c0      	nop			@ (mov r8, r8)
 8000294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000296:	bc08      	pop	{r3}
 8000298:	469e      	mov	lr, r3
 800029a:	4770      	bx	lr

0800029c <_fini>:
 800029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029e:	46c0      	nop			@ (mov r8, r8)
 80002a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002a2:	bc08      	pop	{r3}
 80002a4:	469e      	mov	lr, r3
 80002a6:	4770      	bx	lr
