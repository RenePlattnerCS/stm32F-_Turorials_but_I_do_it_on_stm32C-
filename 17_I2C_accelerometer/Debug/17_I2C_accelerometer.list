
17_I2C_accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000940  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009f4  080009fc  000019fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009f4  080009f4  000019fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080009f4  080009f4  000019fc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080009f4  080009fc  000019fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009f4  080009f4  000019f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009f8  080009f8  000019f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000019fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  080009fc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080009fc  00002038  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000795  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000032b  00000000  00000000  000021b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  000024e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007b  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000e8c  00000000  00000000  0000261b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000149e  00000000  00000000  000034a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003fd85  00000000  00000000  00004945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000446ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  00044710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000448e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000000 	.word	0x20000000
 80000d4:	00000000 	.word	0x00000000
 80000d8:	080009dc 	.word	0x080009dc

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000004 	.word	0x20000004
 80000f8:	080009dc 	.word	0x080009dc

080000fc <__aeabi_fmul>:
 80000fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80000fe:	464f      	mov	r7, r9
 8000100:	4646      	mov	r6, r8
 8000102:	46d6      	mov	lr, sl
 8000104:	0044      	lsls	r4, r0, #1
 8000106:	b5c0      	push	{r6, r7, lr}
 8000108:	0246      	lsls	r6, r0, #9
 800010a:	1c0f      	adds	r7, r1, #0
 800010c:	0a76      	lsrs	r6, r6, #9
 800010e:	0e24      	lsrs	r4, r4, #24
 8000110:	0fc5      	lsrs	r5, r0, #31
 8000112:	2c00      	cmp	r4, #0
 8000114:	d100      	bne.n	8000118 <__aeabi_fmul+0x1c>
 8000116:	e0da      	b.n	80002ce <__aeabi_fmul+0x1d2>
 8000118:	2cff      	cmp	r4, #255	@ 0xff
 800011a:	d074      	beq.n	8000206 <__aeabi_fmul+0x10a>
 800011c:	2380      	movs	r3, #128	@ 0x80
 800011e:	00f6      	lsls	r6, r6, #3
 8000120:	04db      	lsls	r3, r3, #19
 8000122:	431e      	orrs	r6, r3
 8000124:	2300      	movs	r3, #0
 8000126:	4699      	mov	r9, r3
 8000128:	469a      	mov	sl, r3
 800012a:	3c7f      	subs	r4, #127	@ 0x7f
 800012c:	027b      	lsls	r3, r7, #9
 800012e:	0a5b      	lsrs	r3, r3, #9
 8000130:	4698      	mov	r8, r3
 8000132:	007b      	lsls	r3, r7, #1
 8000134:	0e1b      	lsrs	r3, r3, #24
 8000136:	0fff      	lsrs	r7, r7, #31
 8000138:	2b00      	cmp	r3, #0
 800013a:	d074      	beq.n	8000226 <__aeabi_fmul+0x12a>
 800013c:	2bff      	cmp	r3, #255	@ 0xff
 800013e:	d100      	bne.n	8000142 <__aeabi_fmul+0x46>
 8000140:	e08e      	b.n	8000260 <__aeabi_fmul+0x164>
 8000142:	4642      	mov	r2, r8
 8000144:	2180      	movs	r1, #128	@ 0x80
 8000146:	00d2      	lsls	r2, r2, #3
 8000148:	04c9      	lsls	r1, r1, #19
 800014a:	4311      	orrs	r1, r2
 800014c:	3b7f      	subs	r3, #127	@ 0x7f
 800014e:	002a      	movs	r2, r5
 8000150:	18e4      	adds	r4, r4, r3
 8000152:	464b      	mov	r3, r9
 8000154:	407a      	eors	r2, r7
 8000156:	4688      	mov	r8, r1
 8000158:	b2d2      	uxtb	r2, r2
 800015a:	2b0a      	cmp	r3, #10
 800015c:	dc75      	bgt.n	800024a <__aeabi_fmul+0x14e>
 800015e:	464b      	mov	r3, r9
 8000160:	2000      	movs	r0, #0
 8000162:	2b02      	cmp	r3, #2
 8000164:	dd0f      	ble.n	8000186 <__aeabi_fmul+0x8a>
 8000166:	4649      	mov	r1, r9
 8000168:	2301      	movs	r3, #1
 800016a:	408b      	lsls	r3, r1
 800016c:	21a6      	movs	r1, #166	@ 0xa6
 800016e:	00c9      	lsls	r1, r1, #3
 8000170:	420b      	tst	r3, r1
 8000172:	d169      	bne.n	8000248 <__aeabi_fmul+0x14c>
 8000174:	2190      	movs	r1, #144	@ 0x90
 8000176:	0089      	lsls	r1, r1, #2
 8000178:	420b      	tst	r3, r1
 800017a:	d000      	beq.n	800017e <__aeabi_fmul+0x82>
 800017c:	e100      	b.n	8000380 <__aeabi_fmul+0x284>
 800017e:	2188      	movs	r1, #136	@ 0x88
 8000180:	4219      	tst	r1, r3
 8000182:	d000      	beq.n	8000186 <__aeabi_fmul+0x8a>
 8000184:	e0f5      	b.n	8000372 <__aeabi_fmul+0x276>
 8000186:	4641      	mov	r1, r8
 8000188:	0409      	lsls	r1, r1, #16
 800018a:	0c09      	lsrs	r1, r1, #16
 800018c:	4643      	mov	r3, r8
 800018e:	0008      	movs	r0, r1
 8000190:	0c35      	lsrs	r5, r6, #16
 8000192:	0436      	lsls	r6, r6, #16
 8000194:	0c1b      	lsrs	r3, r3, #16
 8000196:	0c36      	lsrs	r6, r6, #16
 8000198:	4370      	muls	r0, r6
 800019a:	4369      	muls	r1, r5
 800019c:	435e      	muls	r6, r3
 800019e:	435d      	muls	r5, r3
 80001a0:	1876      	adds	r6, r6, r1
 80001a2:	0c03      	lsrs	r3, r0, #16
 80001a4:	199b      	adds	r3, r3, r6
 80001a6:	4299      	cmp	r1, r3
 80001a8:	d903      	bls.n	80001b2 <__aeabi_fmul+0xb6>
 80001aa:	2180      	movs	r1, #128	@ 0x80
 80001ac:	0249      	lsls	r1, r1, #9
 80001ae:	468c      	mov	ip, r1
 80001b0:	4465      	add	r5, ip
 80001b2:	0400      	lsls	r0, r0, #16
 80001b4:	0419      	lsls	r1, r3, #16
 80001b6:	0c00      	lsrs	r0, r0, #16
 80001b8:	1809      	adds	r1, r1, r0
 80001ba:	018e      	lsls	r6, r1, #6
 80001bc:	1e70      	subs	r0, r6, #1
 80001be:	4186      	sbcs	r6, r0
 80001c0:	0c1b      	lsrs	r3, r3, #16
 80001c2:	0e89      	lsrs	r1, r1, #26
 80001c4:	195b      	adds	r3, r3, r5
 80001c6:	430e      	orrs	r6, r1
 80001c8:	019b      	lsls	r3, r3, #6
 80001ca:	431e      	orrs	r6, r3
 80001cc:	011b      	lsls	r3, r3, #4
 80001ce:	d46c      	bmi.n	80002aa <__aeabi_fmul+0x1ae>
 80001d0:	0023      	movs	r3, r4
 80001d2:	337f      	adds	r3, #127	@ 0x7f
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	dc00      	bgt.n	80001da <__aeabi_fmul+0xde>
 80001d8:	e0b1      	b.n	800033e <__aeabi_fmul+0x242>
 80001da:	0015      	movs	r5, r2
 80001dc:	0771      	lsls	r1, r6, #29
 80001de:	d00b      	beq.n	80001f8 <__aeabi_fmul+0xfc>
 80001e0:	200f      	movs	r0, #15
 80001e2:	0021      	movs	r1, r4
 80001e4:	4030      	ands	r0, r6
 80001e6:	2804      	cmp	r0, #4
 80001e8:	d006      	beq.n	80001f8 <__aeabi_fmul+0xfc>
 80001ea:	3604      	adds	r6, #4
 80001ec:	0132      	lsls	r2, r6, #4
 80001ee:	d503      	bpl.n	80001f8 <__aeabi_fmul+0xfc>
 80001f0:	4b6e      	ldr	r3, [pc, #440]	@ (80003ac <__aeabi_fmul+0x2b0>)
 80001f2:	401e      	ands	r6, r3
 80001f4:	000b      	movs	r3, r1
 80001f6:	3380      	adds	r3, #128	@ 0x80
 80001f8:	2bfe      	cmp	r3, #254	@ 0xfe
 80001fa:	dd00      	ble.n	80001fe <__aeabi_fmul+0x102>
 80001fc:	e0bd      	b.n	800037a <__aeabi_fmul+0x27e>
 80001fe:	01b2      	lsls	r2, r6, #6
 8000200:	0a52      	lsrs	r2, r2, #9
 8000202:	b2db      	uxtb	r3, r3
 8000204:	e048      	b.n	8000298 <__aeabi_fmul+0x19c>
 8000206:	2e00      	cmp	r6, #0
 8000208:	d000      	beq.n	800020c <__aeabi_fmul+0x110>
 800020a:	e092      	b.n	8000332 <__aeabi_fmul+0x236>
 800020c:	2308      	movs	r3, #8
 800020e:	4699      	mov	r9, r3
 8000210:	3b06      	subs	r3, #6
 8000212:	469a      	mov	sl, r3
 8000214:	027b      	lsls	r3, r7, #9
 8000216:	0a5b      	lsrs	r3, r3, #9
 8000218:	4698      	mov	r8, r3
 800021a:	007b      	lsls	r3, r7, #1
 800021c:	24ff      	movs	r4, #255	@ 0xff
 800021e:	0e1b      	lsrs	r3, r3, #24
 8000220:	0fff      	lsrs	r7, r7, #31
 8000222:	2b00      	cmp	r3, #0
 8000224:	d18a      	bne.n	800013c <__aeabi_fmul+0x40>
 8000226:	4642      	mov	r2, r8
 8000228:	2a00      	cmp	r2, #0
 800022a:	d164      	bne.n	80002f6 <__aeabi_fmul+0x1fa>
 800022c:	4649      	mov	r1, r9
 800022e:	3201      	adds	r2, #1
 8000230:	4311      	orrs	r1, r2
 8000232:	4689      	mov	r9, r1
 8000234:	290a      	cmp	r1, #10
 8000236:	dc08      	bgt.n	800024a <__aeabi_fmul+0x14e>
 8000238:	407d      	eors	r5, r7
 800023a:	2001      	movs	r0, #1
 800023c:	b2ea      	uxtb	r2, r5
 800023e:	2902      	cmp	r1, #2
 8000240:	dc91      	bgt.n	8000166 <__aeabi_fmul+0x6a>
 8000242:	0015      	movs	r5, r2
 8000244:	2200      	movs	r2, #0
 8000246:	e027      	b.n	8000298 <__aeabi_fmul+0x19c>
 8000248:	0015      	movs	r5, r2
 800024a:	4653      	mov	r3, sl
 800024c:	2b02      	cmp	r3, #2
 800024e:	d100      	bne.n	8000252 <__aeabi_fmul+0x156>
 8000250:	e093      	b.n	800037a <__aeabi_fmul+0x27e>
 8000252:	2b03      	cmp	r3, #3
 8000254:	d01a      	beq.n	800028c <__aeabi_fmul+0x190>
 8000256:	2b01      	cmp	r3, #1
 8000258:	d12c      	bne.n	80002b4 <__aeabi_fmul+0x1b8>
 800025a:	2300      	movs	r3, #0
 800025c:	2200      	movs	r2, #0
 800025e:	e01b      	b.n	8000298 <__aeabi_fmul+0x19c>
 8000260:	4643      	mov	r3, r8
 8000262:	34ff      	adds	r4, #255	@ 0xff
 8000264:	2b00      	cmp	r3, #0
 8000266:	d055      	beq.n	8000314 <__aeabi_fmul+0x218>
 8000268:	2103      	movs	r1, #3
 800026a:	464b      	mov	r3, r9
 800026c:	430b      	orrs	r3, r1
 800026e:	0019      	movs	r1, r3
 8000270:	2b0a      	cmp	r3, #10
 8000272:	dc00      	bgt.n	8000276 <__aeabi_fmul+0x17a>
 8000274:	e092      	b.n	800039c <__aeabi_fmul+0x2a0>
 8000276:	2b0f      	cmp	r3, #15
 8000278:	d000      	beq.n	800027c <__aeabi_fmul+0x180>
 800027a:	e08c      	b.n	8000396 <__aeabi_fmul+0x29a>
 800027c:	2280      	movs	r2, #128	@ 0x80
 800027e:	03d2      	lsls	r2, r2, #15
 8000280:	4216      	tst	r6, r2
 8000282:	d003      	beq.n	800028c <__aeabi_fmul+0x190>
 8000284:	4643      	mov	r3, r8
 8000286:	4213      	tst	r3, r2
 8000288:	d100      	bne.n	800028c <__aeabi_fmul+0x190>
 800028a:	e07d      	b.n	8000388 <__aeabi_fmul+0x28c>
 800028c:	2280      	movs	r2, #128	@ 0x80
 800028e:	03d2      	lsls	r2, r2, #15
 8000290:	4332      	orrs	r2, r6
 8000292:	0252      	lsls	r2, r2, #9
 8000294:	0a52      	lsrs	r2, r2, #9
 8000296:	23ff      	movs	r3, #255	@ 0xff
 8000298:	05d8      	lsls	r0, r3, #23
 800029a:	07ed      	lsls	r5, r5, #31
 800029c:	4310      	orrs	r0, r2
 800029e:	4328      	orrs	r0, r5
 80002a0:	bce0      	pop	{r5, r6, r7}
 80002a2:	46ba      	mov	sl, r7
 80002a4:	46b1      	mov	r9, r6
 80002a6:	46a8      	mov	r8, r5
 80002a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002aa:	2301      	movs	r3, #1
 80002ac:	0015      	movs	r5, r2
 80002ae:	0871      	lsrs	r1, r6, #1
 80002b0:	401e      	ands	r6, r3
 80002b2:	430e      	orrs	r6, r1
 80002b4:	0023      	movs	r3, r4
 80002b6:	3380      	adds	r3, #128	@ 0x80
 80002b8:	1c61      	adds	r1, r4, #1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	dd41      	ble.n	8000342 <__aeabi_fmul+0x246>
 80002be:	0772      	lsls	r2, r6, #29
 80002c0:	d094      	beq.n	80001ec <__aeabi_fmul+0xf0>
 80002c2:	220f      	movs	r2, #15
 80002c4:	4032      	ands	r2, r6
 80002c6:	2a04      	cmp	r2, #4
 80002c8:	d000      	beq.n	80002cc <__aeabi_fmul+0x1d0>
 80002ca:	e78e      	b.n	80001ea <__aeabi_fmul+0xee>
 80002cc:	e78e      	b.n	80001ec <__aeabi_fmul+0xf0>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d105      	bne.n	80002de <__aeabi_fmul+0x1e2>
 80002d2:	2304      	movs	r3, #4
 80002d4:	4699      	mov	r9, r3
 80002d6:	3b03      	subs	r3, #3
 80002d8:	2400      	movs	r4, #0
 80002da:	469a      	mov	sl, r3
 80002dc:	e726      	b.n	800012c <__aeabi_fmul+0x30>
 80002de:	0030      	movs	r0, r6
 80002e0:	f000 f8b6 	bl	8000450 <__clzsi2>
 80002e4:	2476      	movs	r4, #118	@ 0x76
 80002e6:	1f43      	subs	r3, r0, #5
 80002e8:	409e      	lsls	r6, r3
 80002ea:	2300      	movs	r3, #0
 80002ec:	4264      	negs	r4, r4
 80002ee:	4699      	mov	r9, r3
 80002f0:	469a      	mov	sl, r3
 80002f2:	1a24      	subs	r4, r4, r0
 80002f4:	e71a      	b.n	800012c <__aeabi_fmul+0x30>
 80002f6:	4640      	mov	r0, r8
 80002f8:	f000 f8aa 	bl	8000450 <__clzsi2>
 80002fc:	464b      	mov	r3, r9
 80002fe:	1a24      	subs	r4, r4, r0
 8000300:	3c76      	subs	r4, #118	@ 0x76
 8000302:	2b0a      	cmp	r3, #10
 8000304:	dca1      	bgt.n	800024a <__aeabi_fmul+0x14e>
 8000306:	4643      	mov	r3, r8
 8000308:	3805      	subs	r0, #5
 800030a:	4083      	lsls	r3, r0
 800030c:	407d      	eors	r5, r7
 800030e:	4698      	mov	r8, r3
 8000310:	b2ea      	uxtb	r2, r5
 8000312:	e724      	b.n	800015e <__aeabi_fmul+0x62>
 8000314:	464a      	mov	r2, r9
 8000316:	3302      	adds	r3, #2
 8000318:	4313      	orrs	r3, r2
 800031a:	002a      	movs	r2, r5
 800031c:	407a      	eors	r2, r7
 800031e:	b2d2      	uxtb	r2, r2
 8000320:	2b0a      	cmp	r3, #10
 8000322:	dc92      	bgt.n	800024a <__aeabi_fmul+0x14e>
 8000324:	4649      	mov	r1, r9
 8000326:	0015      	movs	r5, r2
 8000328:	2900      	cmp	r1, #0
 800032a:	d026      	beq.n	800037a <__aeabi_fmul+0x27e>
 800032c:	4699      	mov	r9, r3
 800032e:	2002      	movs	r0, #2
 8000330:	e719      	b.n	8000166 <__aeabi_fmul+0x6a>
 8000332:	230c      	movs	r3, #12
 8000334:	4699      	mov	r9, r3
 8000336:	3b09      	subs	r3, #9
 8000338:	24ff      	movs	r4, #255	@ 0xff
 800033a:	469a      	mov	sl, r3
 800033c:	e6f6      	b.n	800012c <__aeabi_fmul+0x30>
 800033e:	0015      	movs	r5, r2
 8000340:	0021      	movs	r1, r4
 8000342:	2201      	movs	r2, #1
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	2b1b      	cmp	r3, #27
 8000348:	dd00      	ble.n	800034c <__aeabi_fmul+0x250>
 800034a:	e786      	b.n	800025a <__aeabi_fmul+0x15e>
 800034c:	319e      	adds	r1, #158	@ 0x9e
 800034e:	0032      	movs	r2, r6
 8000350:	408e      	lsls	r6, r1
 8000352:	40da      	lsrs	r2, r3
 8000354:	1e73      	subs	r3, r6, #1
 8000356:	419e      	sbcs	r6, r3
 8000358:	4332      	orrs	r2, r6
 800035a:	0753      	lsls	r3, r2, #29
 800035c:	d004      	beq.n	8000368 <__aeabi_fmul+0x26c>
 800035e:	230f      	movs	r3, #15
 8000360:	4013      	ands	r3, r2
 8000362:	2b04      	cmp	r3, #4
 8000364:	d000      	beq.n	8000368 <__aeabi_fmul+0x26c>
 8000366:	3204      	adds	r2, #4
 8000368:	0153      	lsls	r3, r2, #5
 800036a:	d510      	bpl.n	800038e <__aeabi_fmul+0x292>
 800036c:	2301      	movs	r3, #1
 800036e:	2200      	movs	r2, #0
 8000370:	e792      	b.n	8000298 <__aeabi_fmul+0x19c>
 8000372:	003d      	movs	r5, r7
 8000374:	4646      	mov	r6, r8
 8000376:	4682      	mov	sl, r0
 8000378:	e767      	b.n	800024a <__aeabi_fmul+0x14e>
 800037a:	23ff      	movs	r3, #255	@ 0xff
 800037c:	2200      	movs	r2, #0
 800037e:	e78b      	b.n	8000298 <__aeabi_fmul+0x19c>
 8000380:	2280      	movs	r2, #128	@ 0x80
 8000382:	2500      	movs	r5, #0
 8000384:	03d2      	lsls	r2, r2, #15
 8000386:	e786      	b.n	8000296 <__aeabi_fmul+0x19a>
 8000388:	003d      	movs	r5, r7
 800038a:	431a      	orrs	r2, r3
 800038c:	e783      	b.n	8000296 <__aeabi_fmul+0x19a>
 800038e:	0192      	lsls	r2, r2, #6
 8000390:	2300      	movs	r3, #0
 8000392:	0a52      	lsrs	r2, r2, #9
 8000394:	e780      	b.n	8000298 <__aeabi_fmul+0x19c>
 8000396:	003d      	movs	r5, r7
 8000398:	4646      	mov	r6, r8
 800039a:	e777      	b.n	800028c <__aeabi_fmul+0x190>
 800039c:	002a      	movs	r2, r5
 800039e:	2301      	movs	r3, #1
 80003a0:	407a      	eors	r2, r7
 80003a2:	408b      	lsls	r3, r1
 80003a4:	2003      	movs	r0, #3
 80003a6:	b2d2      	uxtb	r2, r2
 80003a8:	e6e9      	b.n	800017e <__aeabi_fmul+0x82>
 80003aa:	46c0      	nop			@ (mov r8, r8)
 80003ac:	f7ffffff 	.word	0xf7ffffff

080003b0 <__aeabi_i2f>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	2800      	cmp	r0, #0
 80003b4:	d012      	beq.n	80003dc <__aeabi_i2f+0x2c>
 80003b6:	17c3      	asrs	r3, r0, #31
 80003b8:	18c5      	adds	r5, r0, r3
 80003ba:	405d      	eors	r5, r3
 80003bc:	0fc4      	lsrs	r4, r0, #31
 80003be:	0028      	movs	r0, r5
 80003c0:	f000 f846 	bl	8000450 <__clzsi2>
 80003c4:	239e      	movs	r3, #158	@ 0x9e
 80003c6:	1a1b      	subs	r3, r3, r0
 80003c8:	2b96      	cmp	r3, #150	@ 0x96
 80003ca:	dc0f      	bgt.n	80003ec <__aeabi_i2f+0x3c>
 80003cc:	2808      	cmp	r0, #8
 80003ce:	d038      	beq.n	8000442 <__aeabi_i2f+0x92>
 80003d0:	3808      	subs	r0, #8
 80003d2:	4085      	lsls	r5, r0
 80003d4:	026d      	lsls	r5, r5, #9
 80003d6:	0a6d      	lsrs	r5, r5, #9
 80003d8:	b2d8      	uxtb	r0, r3
 80003da:	e002      	b.n	80003e2 <__aeabi_i2f+0x32>
 80003dc:	2400      	movs	r4, #0
 80003de:	2000      	movs	r0, #0
 80003e0:	2500      	movs	r5, #0
 80003e2:	05c0      	lsls	r0, r0, #23
 80003e4:	4328      	orrs	r0, r5
 80003e6:	07e4      	lsls	r4, r4, #31
 80003e8:	4320      	orrs	r0, r4
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	2b99      	cmp	r3, #153	@ 0x99
 80003ee:	dc14      	bgt.n	800041a <__aeabi_i2f+0x6a>
 80003f0:	1f42      	subs	r2, r0, #5
 80003f2:	4095      	lsls	r5, r2
 80003f4:	002a      	movs	r2, r5
 80003f6:	4915      	ldr	r1, [pc, #84]	@ (800044c <__aeabi_i2f+0x9c>)
 80003f8:	4011      	ands	r1, r2
 80003fa:	0755      	lsls	r5, r2, #29
 80003fc:	d01c      	beq.n	8000438 <__aeabi_i2f+0x88>
 80003fe:	250f      	movs	r5, #15
 8000400:	402a      	ands	r2, r5
 8000402:	2a04      	cmp	r2, #4
 8000404:	d018      	beq.n	8000438 <__aeabi_i2f+0x88>
 8000406:	3104      	adds	r1, #4
 8000408:	08ca      	lsrs	r2, r1, #3
 800040a:	0149      	lsls	r1, r1, #5
 800040c:	d515      	bpl.n	800043a <__aeabi_i2f+0x8a>
 800040e:	239f      	movs	r3, #159	@ 0x9f
 8000410:	0252      	lsls	r2, r2, #9
 8000412:	1a18      	subs	r0, r3, r0
 8000414:	0a55      	lsrs	r5, r2, #9
 8000416:	b2c0      	uxtb	r0, r0
 8000418:	e7e3      	b.n	80003e2 <__aeabi_i2f+0x32>
 800041a:	2205      	movs	r2, #5
 800041c:	0029      	movs	r1, r5
 800041e:	1a12      	subs	r2, r2, r0
 8000420:	40d1      	lsrs	r1, r2
 8000422:	0002      	movs	r2, r0
 8000424:	321b      	adds	r2, #27
 8000426:	4095      	lsls	r5, r2
 8000428:	002a      	movs	r2, r5
 800042a:	1e55      	subs	r5, r2, #1
 800042c:	41aa      	sbcs	r2, r5
 800042e:	430a      	orrs	r2, r1
 8000430:	4906      	ldr	r1, [pc, #24]	@ (800044c <__aeabi_i2f+0x9c>)
 8000432:	4011      	ands	r1, r2
 8000434:	0755      	lsls	r5, r2, #29
 8000436:	d1e2      	bne.n	80003fe <__aeabi_i2f+0x4e>
 8000438:	08ca      	lsrs	r2, r1, #3
 800043a:	0252      	lsls	r2, r2, #9
 800043c:	0a55      	lsrs	r5, r2, #9
 800043e:	b2d8      	uxtb	r0, r3
 8000440:	e7cf      	b.n	80003e2 <__aeabi_i2f+0x32>
 8000442:	026d      	lsls	r5, r5, #9
 8000444:	0a6d      	lsrs	r5, r5, #9
 8000446:	308e      	adds	r0, #142	@ 0x8e
 8000448:	e7cb      	b.n	80003e2 <__aeabi_i2f+0x32>
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	fbffffff 	.word	0xfbffffff

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	@ (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <adxl_read_address>:

char data;
uint8_t data_vals[6];

void adxl_read_address(uint8_t reg)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	0002      	movs	r2, r0
 8000494:	1dfb      	adds	r3, r7, #7
 8000496:	701a      	strb	r2, [r3, #0]
	I2C1_ReadByte(DEVICE_ADDR, reg, &data);
 8000498:	4a05      	ldr	r2, [pc, #20]	@ (80004b0 <adxl_read_address+0x24>)
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	0019      	movs	r1, r3
 80004a0:	2053      	movs	r0, #83	@ 0x53
 80004a2:	f000 f8cb 	bl	800063c <I2C1_ReadByte>
}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b002      	add	sp, #8
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	2000001c 	.word	0x2000001c

080004b4 <adxl_write>:

void adxl_write(uint8_t reg, char value)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	0002      	movs	r2, r0
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	701a      	strb	r2, [r3, #0]
 80004c0:	1dbb      	adds	r3, r7, #6
 80004c2:	1c0a      	adds	r2, r1, #0
 80004c4:	701a      	strb	r2, [r3, #0]
	char dataWrite[1];
	dataWrite[0] = value;
 80004c6:	210c      	movs	r1, #12
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	1dba      	adds	r2, r7, #6
 80004cc:	7812      	ldrb	r2, [r2, #0]
 80004ce:	701a      	strb	r2, [r3, #0]
	I2C_burstWrite(DEVICE_ADDR, reg,1,dataWrite);
 80004d0:	187a      	adds	r2, r7, r1
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	7819      	ldrb	r1, [r3, #0]
 80004d6:	0013      	movs	r3, r2
 80004d8:	2201      	movs	r2, #1
 80004da:	2053      	movs	r0, #83	@ 0x53
 80004dc:	f000 f966 	bl	80007ac <I2C_burstWrite>
}
 80004e0:	46c0      	nop			@ (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <adxl_read_values>:

void adxl_read_values(uint8_t reg)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	0002      	movs	r2, r0
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	701a      	strb	r2, [r3, #0]
	I2C1_burstRead(DEVICE_ADDR, reg, 6, (char*) data_vals);
 80004f4:	4a05      	ldr	r2, [pc, #20]	@ (800050c <adxl_read_values+0x24>)
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	7819      	ldrb	r1, [r3, #0]
 80004fa:	0013      	movs	r3, r2
 80004fc:	2206      	movs	r2, #6
 80004fe:	2053      	movs	r0, #83	@ 0x53
 8000500:	f000 f8ec 	bl	80006dc <I2C1_burstRead>
}
 8000504:	46c0      	nop			@ (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b002      	add	sp, #8
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000020 	.word	0x20000020

08000510 <adxl_init>:


void adxl_init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	//enable I2C
	I2C1_init();
 8000514:	f000 f812 	bl	800053c <I2C1_init>
	//read DIVID => returns 0xE5 => device is OK
	adxl_read_address(DEVID_R);
 8000518:	2000      	movs	r0, #0
 800051a:	f7ff ffb7 	bl	800048c <adxl_read_address>
	// set data format to +/- 4g
	adxl_write(DATA_FORMAT_R, FOUR_G);
 800051e:	2101      	movs	r1, #1
 8000520:	2031      	movs	r0, #49	@ 0x31
 8000522:	f7ff ffc7 	bl	80004b4 <adxl_write>
	//reset all bits
	adxl_write(POWER_CTL_R, RESET);
 8000526:	2100      	movs	r1, #0
 8000528:	202d      	movs	r0, #45	@ 0x2d
 800052a:	f7ff ffc3 	bl	80004b4 <adxl_write>
	//configure power mode
	adxl_write(POWER_CTL_R, SET_MEASURE_BIT);
 800052e:	2108      	movs	r1, #8
 8000530:	202d      	movs	r0, #45	@ 0x2d
 8000532:	f7ff ffbf 	bl	80004b4 <adxl_write>


}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <I2C1_init>:


//SCL =  PB8 AF6
//SDA =  PB9 AF6
void I2C1_init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0


	//clock for GPIOB
	RCC->IOPENR |= GPIOBEN;
 8000540:	4b36      	ldr	r3, [pc, #216]	@ (800061c <I2C1_init+0xe0>)
 8000542:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000544:	4b35      	ldr	r3, [pc, #212]	@ (800061c <I2C1_init+0xe0>)
 8000546:	2102      	movs	r1, #2
 8000548:	430a      	orrs	r2, r1
 800054a:	635a      	str	r2, [r3, #52]	@ 0x34


	// set PB8 and 9 to alternate func
	GPIOB->MODER &= ~(1U<<16);
 800054c:	4b34      	ldr	r3, [pc, #208]	@ (8000620 <I2C1_init+0xe4>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b33      	ldr	r3, [pc, #204]	@ (8000620 <I2C1_init+0xe4>)
 8000552:	4934      	ldr	r1, [pc, #208]	@ (8000624 <I2C1_init+0xe8>)
 8000554:	400a      	ands	r2, r1
 8000556:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1U<<17);
 8000558:	4b31      	ldr	r3, [pc, #196]	@ (8000620 <I2C1_init+0xe4>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b30      	ldr	r3, [pc, #192]	@ (8000620 <I2C1_init+0xe4>)
 800055e:	2180      	movs	r1, #128	@ 0x80
 8000560:	0289      	lsls	r1, r1, #10
 8000562:	430a      	orrs	r2, r1
 8000564:	601a      	str	r2, [r3, #0]

	GPIOB->MODER  &= ~(1U<<18);
 8000566:	4b2e      	ldr	r3, [pc, #184]	@ (8000620 <I2C1_init+0xe4>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	4b2d      	ldr	r3, [pc, #180]	@ (8000620 <I2C1_init+0xe4>)
 800056c:	492e      	ldr	r1, [pc, #184]	@ (8000628 <I2C1_init+0xec>)
 800056e:	400a      	ands	r2, r1
 8000570:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |= (1U<<19);
 8000572:	4b2b      	ldr	r3, [pc, #172]	@ (8000620 <I2C1_init+0xe4>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	4b2a      	ldr	r3, [pc, #168]	@ (8000620 <I2C1_init+0xe4>)
 8000578:	2180      	movs	r1, #128	@ 0x80
 800057a:	0309      	lsls	r1, r1, #12
 800057c:	430a      	orrs	r2, r1
 800057e:	601a      	str	r2, [r3, #0]

	// set Pint output type to open drain
	GPIOB->OTYPER |= (1U<<8);
 8000580:	4b27      	ldr	r3, [pc, #156]	@ (8000620 <I2C1_init+0xe4>)
 8000582:	685a      	ldr	r2, [r3, #4]
 8000584:	4b26      	ldr	r3, [pc, #152]	@ (8000620 <I2C1_init+0xe4>)
 8000586:	2180      	movs	r1, #128	@ 0x80
 8000588:	0049      	lsls	r1, r1, #1
 800058a:	430a      	orrs	r2, r1
 800058c:	605a      	str	r2, [r3, #4]
	GPIOB->OTYPER |= (1U<<9);
 800058e:	4b24      	ldr	r3, [pc, #144]	@ (8000620 <I2C1_init+0xe4>)
 8000590:	685a      	ldr	r2, [r3, #4]
 8000592:	4b23      	ldr	r3, [pc, #140]	@ (8000620 <I2C1_init+0xe4>)
 8000594:	2180      	movs	r1, #128	@ 0x80
 8000596:	0089      	lsls	r1, r1, #2
 8000598:	430a      	orrs	r2, r1
 800059a:	605a      	str	r2, [r3, #4]

	// Set output speed to Very High
	//GPIOB->OSPEEDR |= ((3U << (8 * 2)) | (3U << (9 * 2)));

	// enable pullup for both pins
	GPIOB->PUPDR  &= ~(1U<<17);
 800059c:	4b20      	ldr	r3, [pc, #128]	@ (8000620 <I2C1_init+0xe4>)
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <I2C1_init+0xe4>)
 80005a2:	4922      	ldr	r1, [pc, #136]	@ (800062c <I2C1_init+0xf0>)
 80005a4:	400a      	ands	r2, r1
 80005a6:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR  |= (1U<<16);
 80005a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000620 <I2C1_init+0xe4>)
 80005aa:	68da      	ldr	r2, [r3, #12]
 80005ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000620 <I2C1_init+0xe4>)
 80005ae:	2180      	movs	r1, #128	@ 0x80
 80005b0:	0249      	lsls	r1, r1, #9
 80005b2:	430a      	orrs	r2, r1
 80005b4:	60da      	str	r2, [r3, #12]

	GPIOB->PUPDR  &= ~(1U<<19);
 80005b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <I2C1_init+0xe4>)
 80005b8:	68da      	ldr	r2, [r3, #12]
 80005ba:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <I2C1_init+0xe4>)
 80005bc:	491c      	ldr	r1, [pc, #112]	@ (8000630 <I2C1_init+0xf4>)
 80005be:	400a      	ands	r2, r1
 80005c0:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR  |= (1U<<18);
 80005c2:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <I2C1_init+0xe4>)
 80005c4:	68da      	ldr	r2, [r3, #12]
 80005c6:	4b16      	ldr	r3, [pc, #88]	@ (8000620 <I2C1_init+0xe4>)
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	02c9      	lsls	r1, r1, #11
 80005cc:	430a      	orrs	r2, r1
 80005ce:	60da      	str	r2, [r3, #12]

	// set AF6
	GPIOB->AFR[1] &= ~((0xF << ((8 - 8) * 4)) | (0xF << ((9 - 8) * 4)));
 80005d0:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <I2C1_init+0xe4>)
 80005d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005d4:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <I2C1_init+0xe4>)
 80005d6:	21ff      	movs	r1, #255	@ 0xff
 80005d8:	438a      	bics	r2, r1
 80005da:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOB->AFR[1] |=  ((6U << ((8 - 8) * 4)) | (6U << ((9 - 8) * 4)));
 80005dc:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <I2C1_init+0xe4>)
 80005de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <I2C1_init+0xe4>)
 80005e2:	2166      	movs	r1, #102	@ 0x66
 80005e4:	430a      	orrs	r2, r1
 80005e6:	625a      	str	r2, [r3, #36]	@ 0x24




	//enable clock to APB
	RCC->APBENR1 |= APB_I2C1EN;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <I2C1_init+0xe0>)
 80005ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005ec:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <I2C1_init+0xe0>)
 80005ee:	2180      	movs	r1, #128	@ 0x80
 80005f0:	0389      	lsls	r1, r1, #14
 80005f2:	430a      	orrs	r2, r1
 80005f4:	63da      	str	r2, [r3, #60]	@ 0x3c



	// Disable I2C peripheral
	I2C1->CR1 &= ~I2C_CR1_PE;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <I2C1_init+0xf8>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <I2C1_init+0xf8>)
 80005fc:	2101      	movs	r1, #1
 80005fe:	438a      	bics	r2, r1
 8000600:	601a      	str	r2, [r3, #0]

	// Set timing (standard mode 100kHz, assuming 16 MHz clock)
	I2C1->TIMINGR = I2C_TIMING_100KHZ;
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <I2C1_init+0xf8>)
 8000604:	4a0c      	ldr	r2, [pc, #48]	@ (8000638 <I2C1_init+0xfc>)
 8000606:	611a      	str	r2, [r3, #16]

	// Re-enable peripheral
	I2C1->CR1 |= I2C_CR1_PE;
 8000608:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <I2C1_init+0xf8>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <I2C1_init+0xf8>)
 800060e:	2101      	movs	r1, #1
 8000610:	430a      	orrs	r2, r1
 8000612:	601a      	str	r2, [r3, #0]




}
 8000614:	46c0      	nop			@ (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	40021000 	.word	0x40021000
 8000620:	50000400 	.word	0x50000400
 8000624:	fffeffff 	.word	0xfffeffff
 8000628:	fffbffff 	.word	0xfffbffff
 800062c:	fffdffff 	.word	0xfffdffff
 8000630:	fff7ffff 	.word	0xfff7ffff
 8000634:	40005400 	.word	0x40005400
 8000638:	00303d5b 	.word	0x00303d5b

0800063c <I2C1_ReadByte>:




void I2C1_ReadByte(uint8_t saddr, uint8_t reg_addr , char* data)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	603a      	str	r2, [r7, #0]
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	1c02      	adds	r2, r0, #0
 8000648:	701a      	strb	r2, [r3, #0]
 800064a:	1dbb      	adds	r3, r7, #6
 800064c:	1c0a      	adds	r2, r1, #0
 800064e:	701a      	strb	r2, [r3, #0]
	//--- 1. Make sure I2C1 is enabled
	//if (!(I2C1->CR1 & I2C_CR1_PE))
		//I2C1->CR1 |= I2C_CR1_PE;

	//wait for bus to be not busy
	while(I2C1->ISR & I2C_ISR_BUSY){}
 8000650:	46c0      	nop			@ (mov r8, r8)
 8000652:	4b20      	ldr	r3, [pc, #128]	@ (80006d4 <I2C1_ReadByte+0x98>)
 8000654:	699a      	ldr	r2, [r3, #24]
 8000656:	2380      	movs	r3, #128	@ 0x80
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	4013      	ands	r3, r2
 800065c:	d1f9      	bne.n	8000652 <I2C1_ReadByte+0x16>
	// Generate START
	I2C1->CR2 |= I2C_CR2_START;
	*/
	// 2. Configure CR2 in one shot
	I2C1->CR2 =
	((uint8_t)saddr << 1) |    // 7-bit slave address
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	005a      	lsls	r2, r3, #1
	I2C1->CR2 =
 8000664:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <I2C1_ReadByte+0x98>)
	(uint32_t) I2C_CR2_NBYTES | // NBYTES
 8000666:	2180      	movs	r1, #128	@ 0x80
 8000668:	0249      	lsls	r1, r1, #9
 800066a:	430a      	orrs	r2, r1
	I2C1->CR2 =
 800066c:	605a      	str	r2, [r3, #4]
	(0U << 10); 				//I2C_CR2_RD_WRN
	//I2C_CR2_AUTOEND |			// Auto STOP after last byte
	//I2C_CR2_START;

	// Generate START
	I2C1->CR2 |= I2C_CR2_START;
 800066e:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <I2C1_ReadByte+0x98>)
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <I2C1_ReadByte+0x98>)
 8000674:	2180      	movs	r1, #128	@ 0x80
 8000676:	0189      	lsls	r1, r1, #6
 8000678:	430a      	orrs	r2, r1
 800067a:	605a      	str	r2, [r3, #4]

	I2C1->TXDR = reg_addr;  // e.g. 0x32 (DATAX0 register)
 800067c:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <I2C1_ReadByte+0x98>)
 800067e:	1dba      	adds	r2, r7, #6
 8000680:	7812      	ldrb	r2, [r2, #0]
 8000682:	629a      	str	r2, [r3, #40]	@ 0x28
	// Wait until transfer complete (TC)
	//timeout = I2C_TIMEOUT;
	while (!(I2C1->ISR & I2C_ISR_TC))
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <I2C1_ReadByte+0x98>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	2240      	movs	r2, #64	@ 0x40
 800068c:	4013      	ands	r3, r2
 800068e:	d0fa      	beq.n	8000686 <I2C1_ReadByte+0x4a>
	// Auto generate STOP after last byte/
	I2C1->CR2 |=I2C_CR2_AUTOEND;
	*/

	I2C1->CR2 =
		    ((uint8_t)saddr << 1) |  // SADD[7:1] – slave address
 8000690:	1dfb      	adds	r3, r7, #7
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	005a      	lsls	r2, r3, #1
	I2C1->CR2 =
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <I2C1_ReadByte+0x98>)
		    (1U << 16)            |   // NBYTES = 1 (read one byte)
		    I2C_CR2_RD_WRN        |   // Read direction
		    I2C_CR2_START         |   // Generate (re)START
 8000698:	490f      	ldr	r1, [pc, #60]	@ (80006d8 <I2C1_ReadByte+0x9c>)
 800069a:	430a      	orrs	r2, r1
	I2C1->CR2 =
 800069c:	605a      	str	r2, [r3, #4]



	// Wait until RXNE (Receive buffer not empty)
	//timeout = I2C_TIMEOUT;
	while (!(I2C1->ISR & I2C_ISR_RXNE))
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <I2C1_ReadByte+0x98>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	2204      	movs	r2, #4
 80006a6:	4013      	ands	r3, r2
 80006a8:	d0fa      	beq.n	80006a0 <I2C1_ReadByte+0x64>
		//if (--timeout == 0) return 0xFF;
	}


	// Read received byte
	*data++ = (uint8_t)I2C1->RXDR;
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <I2C1_ReadByte+0x98>)
 80006ac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	b2ca      	uxtb	r2, r1
 80006b6:	701a      	strb	r2, [r3, #0]



	// After AUTOEND, STOP is generated automatically
	// Optionally wait for STOP flag
	while (!(I2C1->ISR & I2C_ISR_STOPF)){}
 80006b8:	46c0      	nop			@ (mov r8, r8)
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <I2C1_ReadByte+0x98>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	2220      	movs	r2, #32
 80006c0:	4013      	ands	r3, r2
 80006c2:	d0fa      	beq.n	80006ba <I2C1_ReadByte+0x7e>


	// Clear STOP flag
	I2C1->ICR = I2C_ICR_STOPCF;
 80006c4:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <I2C1_ReadByte+0x98>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]



}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b002      	add	sp, #8
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	40005400 	.word	0x40005400
 80006d8:	02012400 	.word	0x02012400

080006dc <I2C1_burstRead>:

void I2C1_burstRead(uint8_t saddr, uint8_t reg_addr, int n, char* data)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60ba      	str	r2, [r7, #8]
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	230f      	movs	r3, #15
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	1c02      	adds	r2, r0, #0
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	230e      	movs	r3, #14
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	1c0a      	adds	r2, r1, #0
 80006f4:	701a      	strb	r2, [r3, #0]
	//volatile int tmp;

	//wait for bus to be not busy
	while(I2C1->ISR & I2C_ISR_BUSY){}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <I2C1_burstRead+0xc8>)
 80006fa:	699a      	ldr	r2, [r3, #24]
 80006fc:	2380      	movs	r3, #128	@ 0x80
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	4013      	ands	r3, r2
 8000702:	d1f9      	bne.n	80006f8 <I2C1_burstRead+0x1c>


	// 2. Configure CR2 in one shot
	I2C1->CR2 =
	((uint8_t)saddr << 1) |    // 7-bit slave address
 8000704:	230f      	movs	r3, #15
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	005a      	lsls	r2, r3, #1
	I2C1->CR2 =
 800070c:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <I2C1_burstRead+0xc8>)
	(uint32_t) I2C_CR2_NBYTES | // NBYTES
	(0U << 10) |
 800070e:	2190      	movs	r1, #144	@ 0x90
 8000710:	0249      	lsls	r1, r1, #9
 8000712:	430a      	orrs	r2, r1
	I2C1->CR2 =
 8000714:	605a      	str	r2, [r3, #4]
	I2C_CR2_START;             // Auto STOP after last byte
	//NO AUTOEND HERE!


	// Wait until TXIS (ready to send data)
	while (!(I2C1->ISR & I2C_ISR_TXIS)){}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	4b22      	ldr	r3, [pc, #136]	@ (80007a4 <I2C1_burstRead+0xc8>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	2202      	movs	r2, #2
 800071e:	4013      	ands	r3, r2
 8000720:	d0fa      	beq.n	8000718 <I2C1_burstRead+0x3c>
	// Send register address
	I2C1->TXDR = reg_addr;
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <I2C1_burstRead+0xc8>)
 8000724:	220e      	movs	r2, #14
 8000726:	18ba      	adds	r2, r7, r2
 8000728:	7812      	ldrb	r2, [r2, #0]
 800072a:	629a      	str	r2, [r3, #40]	@ 0x28


	while (!(I2C1->ISR & I2C_ISR_TC))
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <I2C1_burstRead+0xc8>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	2240      	movs	r2, #64	@ 0x40
 8000734:	4013      	ands	r3, r2
 8000736:	d0fa      	beq.n	800072e <I2C1_burstRead+0x52>
		//if (--timeout == 0) return 0xFF;
	}


	I2C1->CR2 =
	    ((uint8_t)saddr << 1) |  // SADD[7:1] – slave address
 8000738:	230f      	movs	r3, #15
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	005a      	lsls	r2, r3, #1
		((uint32_t)n << 16)           |   // NBYTES = 1 (read one byte)
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	041b      	lsls	r3, r3, #16
	    ((uint8_t)saddr << 1) |  // SADD[7:1] – slave address
 8000744:	431a      	orrs	r2, r3
	I2C1->CR2 =
 8000746:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <I2C1_burstRead+0xc8>)
	    I2C_CR2_RD_WRN        |   // Read direction
	    I2C_CR2_START         |   // Generate (re)START
 8000748:	4917      	ldr	r1, [pc, #92]	@ (80007a8 <I2C1_burstRead+0xcc>)
 800074a:	430a      	orrs	r2, r1
	I2C1->CR2 =
 800074c:	605a      	str	r2, [r3, #4]
	    I2C_CR2_AUTOEND;          // Auto STOP after last byte



	//--- 4. Receive loop
	for (uint8_t i = 0; i < n; i++)
 800074e:	2317      	movs	r3, #23
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e012      	b.n	800077e <I2C1_burstRead+0xa2>
	{
		// Wait until RXNE (data ready)
		while (!(I2C1->ISR & I2C_ISR_RXNE)){}
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <I2C1_burstRead+0xc8>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	2204      	movs	r2, #4
 8000760:	4013      	ands	r3, r2
 8000762:	d0fa      	beq.n	800075a <I2C1_burstRead+0x7e>

		// Read received byte
		*data++ = (uint8_t)I2C1->RXDR;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <I2C1_burstRead+0xc8>)
 8000766:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	b2ca      	uxtb	r2, r1
 8000770:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < n; i++)
 8000772:	2117      	movs	r1, #23
 8000774:	187b      	adds	r3, r7, r1
 8000776:	781a      	ldrb	r2, [r3, #0]
 8000778:	187b      	adds	r3, r7, r1
 800077a:	3201      	adds	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
 800077e:	2317      	movs	r3, #23
 8000780:	18fb      	adds	r3, r7, r3
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	429a      	cmp	r2, r3
 8000788:	dce6      	bgt.n	8000758 <I2C1_burstRead+0x7c>
	}



	// Optionally wait for STOP flag
	while (!(I2C1->ISR & I2C_ISR_STOPF)){}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <I2C1_burstRead+0xc8>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	2220      	movs	r2, #32
 8000792:	4013      	ands	r3, r2
 8000794:	d0fa      	beq.n	800078c <I2C1_burstRead+0xb0>

	// Clear STOP flag
	I2C1->ICR = I2C_ICR_STOPCF;
 8000796:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <I2C1_burstRead+0xc8>)
 8000798:	2220      	movs	r2, #32
 800079a:	61da      	str	r2, [r3, #28]

}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b006      	add	sp, #24
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40005400 	.word	0x40005400
 80007a8:	02002400 	.word	0x02002400

080007ac <I2C_burstWrite>:



void I2C_burstWrite(uint8_t saddr, uint8_t reg_addr, int n, char* data)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60ba      	str	r2, [r7, #8]
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	230f      	movs	r3, #15
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	1c02      	adds	r2, r0, #0
 80007bc:	701a      	strb	r2, [r3, #0]
 80007be:	230e      	movs	r3, #14
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	1c0a      	adds	r2, r1, #0
 80007c4:	701a      	strb	r2, [r3, #0]
	//wait for bus to be not busy
	while(I2C1->ISR & I2C_ISR_BUSY){}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <I2C_burstWrite+0xbc>)
 80007ca:	699a      	ldr	r2, [r3, #24]
 80007cc:	2380      	movs	r3, #128	@ 0x80
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	4013      	ands	r3, r2
 80007d2:	d1f9      	bne.n	80007c8 <I2C_burstWrite+0x1c>
	I2C1->CR2 |=I2C_CR2_AUTOEND;
	*/

	 // 2. Configure CR2 in one shot
	I2C1->CR2 =
	((uint32_t)saddr << 1) |    // 7-bit slave address
 80007d4:	230f      	movs	r3, #15
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	005a      	lsls	r2, r3, #1
	((uint32_t)(n + 1) << 16) | // NBYTES = reg_addr + data bytes
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	3301      	adds	r3, #1
 80007e0:	041b      	lsls	r3, r3, #16
	((uint32_t)saddr << 1) |    // 7-bit slave address
 80007e2:	431a      	orrs	r2, r3
	I2C1->CR2 =
 80007e4:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <I2C_burstWrite+0xbc>)
	((uint32_t)(n + 1) << 16) | // NBYTES = reg_addr + data bytes
 80007e6:	2180      	movs	r1, #128	@ 0x80
 80007e8:	0489      	lsls	r1, r1, #18
 80007ea:	430a      	orrs	r2, r1
	I2C1->CR2 =
 80007ec:	605a      	str	r2, [r3, #4]
	I2C_CR2_AUTOEND;             // Auto STOP after last byte

	// Write direction (RD_WRN = 0 by default)

	// 3. Generate START
	I2C1->CR2 |= I2C_CR2_START;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <I2C_burstWrite+0xbc>)
 80007f0:	685a      	ldr	r2, [r3, #4]
 80007f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <I2C_burstWrite+0xbc>)
 80007f4:	2180      	movs	r1, #128	@ 0x80
 80007f6:	0189      	lsls	r1, r1, #6
 80007f8:	430a      	orrs	r2, r1
 80007fa:	605a      	str	r2, [r3, #4]




	//--- 3. Send register address first
	while (!(I2C1->ISR & I2C_ISR_TXIS)){}
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <I2C_burstWrite+0xbc>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	2202      	movs	r2, #2
 8000804:	4013      	ands	r3, r2
 8000806:	d0fa      	beq.n	80007fe <I2C_burstWrite+0x52>

	I2C1->TXDR = reg_addr; //inside the I²C slave device
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <I2C_burstWrite+0xbc>)
 800080a:	220e      	movs	r2, #14
 800080c:	18ba      	adds	r2, r7, r2
 800080e:	7812      	ldrb	r2, [r2, #0]
 8000810:	629a      	str	r2, [r3, #40]	@ 0x28



	//--- 4. Send all data bytes
	for (uint8_t i = 0; i < n; i++)
 8000812:	2317      	movs	r3, #23
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
 800081a:	e011      	b.n	8000840 <I2C_burstWrite+0x94>
	{
		while (!(I2C1->ISR & I2C_ISR_TXIS)){}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <I2C_burstWrite+0xbc>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	2202      	movs	r2, #2
 8000824:	4013      	ands	r3, r2
 8000826:	d0fa      	beq.n	800081e <I2C_burstWrite+0x72>

		I2C1->TXDR = *data++;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <I2C_burstWrite+0xbc>)
 8000832:	629a      	str	r2, [r3, #40]	@ 0x28
	for (uint8_t i = 0; i < n; i++)
 8000834:	2117      	movs	r1, #23
 8000836:	187b      	adds	r3, r7, r1
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	187b      	adds	r3, r7, r1
 800083c:	3201      	adds	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	2317      	movs	r3, #23
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	429a      	cmp	r2, r3
 800084a:	dce7      	bgt.n	800081c <I2C_burstWrite+0x70>
	}



	// Optionally wait for STOP flag
	while (!(I2C1->ISR & I2C_ISR_STOPF)){}
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <I2C_burstWrite+0xbc>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	2220      	movs	r2, #32
 8000854:	4013      	ands	r3, r2
 8000856:	d0fa      	beq.n	800084e <I2C_burstWrite+0xa2>

	// Clear STOP flag
	I2C1->ICR = I2C_ICR_STOPCF;
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <I2C_burstWrite+0xbc>)
 800085a:	2220      	movs	r2, #32
 800085c:	61da      	str	r2, [r3, #28]

}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b006      	add	sp, #24
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	40005400 	.word	0x40005400

0800086c <main>:
int16_t x,y,z;
float xg, yg, zg;
extern uint8_t data_vals[6];

int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

	adxl_init();
 8000870:	f7ff fe4e 	bl	8000510 <adxl_init>


	while(1)
	{
		adxl_read_values(DATA_START_ADDR);
 8000874:	2032      	movs	r0, #50	@ 0x32
 8000876:	f7ff fe37 	bl	80004e8 <adxl_read_values>

		x = (int16_t) ((data_vals[1] << 8)  |  data_vals[0]);
 800087a:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <main+0xb4>)
 800087c:	785b      	ldrb	r3, [r3, #1]
 800087e:	b21b      	sxth	r3, r3
 8000880:	021b      	lsls	r3, r3, #8
 8000882:	b21a      	sxth	r2, r3
 8000884:	4b26      	ldr	r3, [pc, #152]	@ (8000920 <main+0xb4>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b21b      	sxth	r3, r3
 800088a:	4313      	orrs	r3, r2
 800088c:	b21a      	sxth	r2, r3
 800088e:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <main+0xb8>)
 8000890:	801a      	strh	r2, [r3, #0]
		y = (int16_t) ((data_vals[3] << 8)  |  data_vals[2]);
 8000892:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <main+0xb4>)
 8000894:	78db      	ldrb	r3, [r3, #3]
 8000896:	b21b      	sxth	r3, r3
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b21a      	sxth	r2, r3
 800089c:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <main+0xb4>)
 800089e:	789b      	ldrb	r3, [r3, #2]
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21a      	sxth	r2, r3
 80008a6:	4b20      	ldr	r3, [pc, #128]	@ (8000928 <main+0xbc>)
 80008a8:	801a      	strh	r2, [r3, #0]
		z = (int16_t) ((data_vals[5] << 8)  |  data_vals[4]);
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <main+0xb4>)
 80008ac:	795b      	ldrb	r3, [r3, #5]
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b21a      	sxth	r2, r3
 80008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <main+0xb4>)
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b21a      	sxth	r2, r3
 80008be:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <main+0xc0>)
 80008c0:	801a      	strh	r2, [r3, #0]

		xg = (x * 0.0078f);
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <main+0xb8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	5e9b      	ldrsh	r3, [r3, r2]
 80008c8:	0018      	movs	r0, r3
 80008ca:	f7ff fd71 	bl	80003b0 <__aeabi_i2f>
 80008ce:	1c03      	adds	r3, r0, #0
 80008d0:	4917      	ldr	r1, [pc, #92]	@ (8000930 <main+0xc4>)
 80008d2:	1c18      	adds	r0, r3, #0
 80008d4:	f7ff fc12 	bl	80000fc <__aeabi_fmul>
 80008d8:	1c03      	adds	r3, r0, #0
 80008da:	1c1a      	adds	r2, r3, #0
 80008dc:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <main+0xc8>)
 80008de:	601a      	str	r2, [r3, #0]
		yg = (y * 0.0078f);
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <main+0xbc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	5e9b      	ldrsh	r3, [r3, r2]
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff fd62 	bl	80003b0 <__aeabi_i2f>
 80008ec:	1c03      	adds	r3, r0, #0
 80008ee:	4910      	ldr	r1, [pc, #64]	@ (8000930 <main+0xc4>)
 80008f0:	1c18      	adds	r0, r3, #0
 80008f2:	f7ff fc03 	bl	80000fc <__aeabi_fmul>
 80008f6:	1c03      	adds	r3, r0, #0
 80008f8:	1c1a      	adds	r2, r3, #0
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <main+0xcc>)
 80008fc:	601a      	str	r2, [r3, #0]
		zg = (z * 0.0078f);
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <main+0xc0>)
 8000900:	2200      	movs	r2, #0
 8000902:	5e9b      	ldrsh	r3, [r3, r2]
 8000904:	0018      	movs	r0, r3
 8000906:	f7ff fd53 	bl	80003b0 <__aeabi_i2f>
 800090a:	1c03      	adds	r3, r0, #0
 800090c:	4908      	ldr	r1, [pc, #32]	@ (8000930 <main+0xc4>)
 800090e:	1c18      	adds	r0, r3, #0
 8000910:	f7ff fbf4 	bl	80000fc <__aeabi_fmul>
 8000914:	1c03      	adds	r3, r0, #0
 8000916:	1c1a      	adds	r2, r3, #0
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <main+0xd0>)
 800091a:	601a      	str	r2, [r3, #0]
		adxl_read_values(DATA_START_ADDR);
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	e7a9      	b.n	8000874 <main+0x8>
 8000920:	20000020 	.word	0x20000020
 8000924:	20000026 	.word	0x20000026
 8000928:	20000028 	.word	0x20000028
 800092c:	2000002a 	.word	0x2000002a
 8000930:	3bff9724 	.word	0x3bff9724
 8000934:	2000002c 	.word	0x2000002c
 8000938:	20000030 	.word	0x20000030
 800093c:	20000034 	.word	0x20000034

08000940 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000940:	480d      	ldr	r0, [pc, #52]	@ (8000978 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000942:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000944:	e000      	b.n	8000948 <Reset_Handler+0x8>
 8000946:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <LoopForever+0x6>)
  ldr r1, =_edata
 800094a:	490d      	ldr	r1, [pc, #52]	@ (8000980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800094c:	4a0d      	ldr	r2, [pc, #52]	@ (8000984 <LoopForever+0xe>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000960:	4c0a      	ldr	r4, [pc, #40]	@ (800098c <LoopForever+0x16>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800096e:	f000 f811 	bl	8000994 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000972:	f7ff ff7b 	bl	800086c <main>

08000976 <LoopForever>:

LoopForever:
  b LoopForever
 8000976:	e7fe      	b.n	8000976 <LoopForever>
  ldr   r0, =_estack
 8000978:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000984:	080009fc 	.word	0x080009fc
  ldr r2, =_sbss
 8000988:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800098c:	20000038 	.word	0x20000038

08000990 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC_IRQHandler>
	...

08000994 <__libc_init_array>:
 8000994:	b570      	push	{r4, r5, r6, lr}
 8000996:	2600      	movs	r6, #0
 8000998:	4c0c      	ldr	r4, [pc, #48]	@ (80009cc <__libc_init_array+0x38>)
 800099a:	4d0d      	ldr	r5, [pc, #52]	@ (80009d0 <__libc_init_array+0x3c>)
 800099c:	1b64      	subs	r4, r4, r5
 800099e:	10a4      	asrs	r4, r4, #2
 80009a0:	42a6      	cmp	r6, r4
 80009a2:	d109      	bne.n	80009b8 <__libc_init_array+0x24>
 80009a4:	2600      	movs	r6, #0
 80009a6:	f000 f819 	bl	80009dc <_init>
 80009aa:	4c0a      	ldr	r4, [pc, #40]	@ (80009d4 <__libc_init_array+0x40>)
 80009ac:	4d0a      	ldr	r5, [pc, #40]	@ (80009d8 <__libc_init_array+0x44>)
 80009ae:	1b64      	subs	r4, r4, r5
 80009b0:	10a4      	asrs	r4, r4, #2
 80009b2:	42a6      	cmp	r6, r4
 80009b4:	d105      	bne.n	80009c2 <__libc_init_array+0x2e>
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	00b3      	lsls	r3, r6, #2
 80009ba:	58eb      	ldr	r3, [r5, r3]
 80009bc:	4798      	blx	r3
 80009be:	3601      	adds	r6, #1
 80009c0:	e7ee      	b.n	80009a0 <__libc_init_array+0xc>
 80009c2:	00b3      	lsls	r3, r6, #2
 80009c4:	58eb      	ldr	r3, [r5, r3]
 80009c6:	4798      	blx	r3
 80009c8:	3601      	adds	r6, #1
 80009ca:	e7f2      	b.n	80009b2 <__libc_init_array+0x1e>
 80009cc:	080009f4 	.word	0x080009f4
 80009d0:	080009f4 	.word	0x080009f4
 80009d4:	080009f8 	.word	0x080009f8
 80009d8:	080009f4 	.word	0x080009f4

080009dc <_init>:
 80009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e2:	bc08      	pop	{r3}
 80009e4:	469e      	mov	lr, r3
 80009e6:	4770      	bx	lr

080009e8 <_fini>:
 80009e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ee:	bc08      	pop	{r3}
 80009f0:	469e      	mov	lr, r3
 80009f2:	4770      	bx	lr
