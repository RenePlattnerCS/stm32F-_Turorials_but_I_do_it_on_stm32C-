
12_UART2_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000430  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e4  080004ec  000014ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e4  080004e4  000014ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004e4  080004e4  000014ec  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004e4  080004ec  000014ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e4  080004e4  000014e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004e8  080004e8  000014e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004ec  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004ec  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009e2  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000302  00000000  00000000  00001ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  000021f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000078  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b86c  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f9f  00000000  00000000  0000db8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003fe05  00000000  00000000  0000eb2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004e930  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001b4  00000000  00000000  0004e974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0004eb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000000 	.word	0x20000000
 80000d4:	00000000 	.word	0x00000000
 80000d8:	080004cc 	.word	0x080004cc

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000004 	.word	0x20000004
 80000f8:	080004cc 	.word	0x080004cc

080000fc <__udivsi3>:
 80000fc:	2200      	movs	r2, #0
 80000fe:	0843      	lsrs	r3, r0, #1
 8000100:	428b      	cmp	r3, r1
 8000102:	d374      	bcc.n	80001ee <__udivsi3+0xf2>
 8000104:	0903      	lsrs	r3, r0, #4
 8000106:	428b      	cmp	r3, r1
 8000108:	d35f      	bcc.n	80001ca <__udivsi3+0xce>
 800010a:	0a03      	lsrs	r3, r0, #8
 800010c:	428b      	cmp	r3, r1
 800010e:	d344      	bcc.n	800019a <__udivsi3+0x9e>
 8000110:	0b03      	lsrs	r3, r0, #12
 8000112:	428b      	cmp	r3, r1
 8000114:	d328      	bcc.n	8000168 <__udivsi3+0x6c>
 8000116:	0c03      	lsrs	r3, r0, #16
 8000118:	428b      	cmp	r3, r1
 800011a:	d30d      	bcc.n	8000138 <__udivsi3+0x3c>
 800011c:	22ff      	movs	r2, #255	@ 0xff
 800011e:	0209      	lsls	r1, r1, #8
 8000120:	ba12      	rev	r2, r2
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d302      	bcc.n	800012e <__udivsi3+0x32>
 8000128:	1212      	asrs	r2, r2, #8
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	d065      	beq.n	80001fa <__udivsi3+0xfe>
 800012e:	0b03      	lsrs	r3, r0, #12
 8000130:	428b      	cmp	r3, r1
 8000132:	d319      	bcc.n	8000168 <__udivsi3+0x6c>
 8000134:	e000      	b.n	8000138 <__udivsi3+0x3c>
 8000136:	0a09      	lsrs	r1, r1, #8
 8000138:	0bc3      	lsrs	r3, r0, #15
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x46>
 800013e:	03cb      	lsls	r3, r1, #15
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0b83      	lsrs	r3, r0, #14
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x52>
 800014a:	038b      	lsls	r3, r1, #14
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b43      	lsrs	r3, r0, #13
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x5e>
 8000156:	034b      	lsls	r3, r1, #13
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b03      	lsrs	r3, r0, #12
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x6a>
 8000162:	030b      	lsls	r3, r1, #12
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0ac3      	lsrs	r3, r0, #11
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x76>
 800016e:	02cb      	lsls	r3, r1, #11
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0a83      	lsrs	r3, r0, #10
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x82>
 800017a:	028b      	lsls	r3, r1, #10
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a43      	lsrs	r3, r0, #9
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x8e>
 8000186:	024b      	lsls	r3, r1, #9
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a03      	lsrs	r3, r0, #8
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x9a>
 8000192:	020b      	lsls	r3, r1, #8
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	d2cd      	bcs.n	8000136 <__udivsi3+0x3a>
 800019a:	09c3      	lsrs	r3, r0, #7
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xa8>
 80001a0:	01cb      	lsls	r3, r1, #7
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0983      	lsrs	r3, r0, #6
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xb4>
 80001ac:	018b      	lsls	r3, r1, #6
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0943      	lsrs	r3, r0, #5
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xc0>
 80001b8:	014b      	lsls	r3, r1, #5
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0903      	lsrs	r3, r0, #4
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xcc>
 80001c4:	010b      	lsls	r3, r1, #4
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	08c3      	lsrs	r3, r0, #3
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xd8>
 80001d0:	00cb      	lsls	r3, r1, #3
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0883      	lsrs	r3, r0, #2
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xe4>
 80001dc:	008b      	lsls	r3, r1, #2
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0843      	lsrs	r3, r0, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xf0>
 80001e8:	004b      	lsls	r3, r1, #1
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	1a41      	subs	r1, r0, r1
 80001f0:	d200      	bcs.n	80001f4 <__udivsi3+0xf8>
 80001f2:	4601      	mov	r1, r0
 80001f4:	4152      	adcs	r2, r2
 80001f6:	4610      	mov	r0, r2
 80001f8:	4770      	bx	lr
 80001fa:	e7ff      	b.n	80001fc <__udivsi3+0x100>
 80001fc:	b501      	push	{r0, lr}
 80001fe:	2000      	movs	r0, #0
 8000200:	f000 f806 	bl	8000210 <__aeabi_idiv0>
 8000204:	bd02      	pop	{r1, pc}
 8000206:	46c0      	nop			@ (mov r8, r8)

08000208 <__aeabi_uidivmod>:
 8000208:	2900      	cmp	r1, #0
 800020a:	d0f7      	beq.n	80001fc <__udivsi3+0x100>
 800020c:	e776      	b.n	80000fc <__udivsi3>
 800020e:	4770      	bx	lr

08000210 <__aeabi_idiv0>:
 8000210:	4770      	bx	lr
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <main>:
#define LED_PIN 	GPIOA_5

char key;

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	RCC->IOPENR |= GPIOAEN;
 8000218:	4b0d      	ldr	r3, [pc, #52]	@ (8000250 <main+0x3c>)
 800021a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800021c:	4b0c      	ldr	r3, [pc, #48]	@ (8000250 <main+0x3c>)
 800021e:	2101      	movs	r1, #1
 8000220:	430a      	orrs	r2, r1
 8000222:	635a      	str	r2, [r3, #52]	@ 0x34
	GPIOA->MODER |= (1U << 10);
 8000224:	23a0      	movs	r3, #160	@ 0xa0
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	23a0      	movs	r3, #160	@ 0xa0
 800022c:	05db      	lsls	r3, r3, #23
 800022e:	2180      	movs	r1, #128	@ 0x80
 8000230:	00c9      	lsls	r1, r1, #3
 8000232:	430a      	orrs	r2, r1
 8000234:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1U << 11);
 8000236:	23a0      	movs	r3, #160	@ 0xa0
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	23a0      	movs	r3, #160	@ 0xa0
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	4904      	ldr	r1, [pc, #16]	@ (8000254 <main+0x40>)
 8000242:	400a      	ands	r2, r1
 8000244:	601a      	str	r2, [r3, #0]

	uart2_rxtx_interrupt();
 8000246:	f000 f871 	bl	800032c <uart2_rxtx_interrupt>

	while(1)
 800024a:	46c0      	nop			@ (mov r8, r8)
 800024c:	e7fd      	b.n	800024a <main+0x36>
 800024e:	46c0      	nop			@ (mov r8, r8)
 8000250:	40021000 	.word	0x40021000
 8000254:	fffff7ff 	.word	0xfffff7ff

08000258 <USART2_IRQHandler>:
}



void USART2_IRQHandler(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	//check if something set in Read status reg
	if(USART2->ISR & SR_RXNE)
 800025c:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <USART2_IRQHandler+0x48>)
 800025e:	69db      	ldr	r3, [r3, #28]
 8000260:	2220      	movs	r2, #32
 8000262:	4013      	ands	r3, r2
 8000264:	d019      	beq.n	800029a <USART2_IRQHandler+0x42>
	{
		key = USART2->RDR;
 8000266:	4b0e      	ldr	r3, [pc, #56]	@ (80002a0 <USART2_IRQHandler+0x48>)
 8000268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800026a:	b2da      	uxtb	r2, r3
 800026c:	4b0d      	ldr	r3, [pc, #52]	@ (80002a4 <USART2_IRQHandler+0x4c>)
 800026e:	701a      	strb	r2, [r3, #0]

		if(key == '1')
 8000270:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <USART2_IRQHandler+0x4c>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	2b31      	cmp	r3, #49	@ 0x31
 8000276:	d108      	bne.n	800028a <USART2_IRQHandler+0x32>
				{
					GPIOA->ODR |= LED_PIN;
 8000278:	23a0      	movs	r3, #160	@ 0xa0
 800027a:	05db      	lsls	r3, r3, #23
 800027c:	695a      	ldr	r2, [r3, #20]
 800027e:	23a0      	movs	r3, #160	@ 0xa0
 8000280:	05db      	lsls	r3, r3, #23
 8000282:	2120      	movs	r1, #32
 8000284:	430a      	orrs	r2, r1
 8000286:	615a      	str	r2, [r3, #20]
				else
				{
					GPIOA->ODR &= ~LED_PIN;
				}
	}
}
 8000288:	e007      	b.n	800029a <USART2_IRQHandler+0x42>
					GPIOA->ODR &= ~LED_PIN;
 800028a:	23a0      	movs	r3, #160	@ 0xa0
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	695a      	ldr	r2, [r3, #20]
 8000290:	23a0      	movs	r3, #160	@ 0xa0
 8000292:	05db      	lsls	r3, r3, #23
 8000294:	2120      	movs	r1, #32
 8000296:	438a      	bics	r2, r1
 8000298:	615a      	str	r2, [r3, #20]
}
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40004400 	.word	0x40004400
 80002a4:	2000001c 	.word	0x2000001c

080002a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	0002      	movs	r2, r0
 80002b0:	1dfb      	adds	r3, r7, #7
 80002b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80002b4:	1dfb      	adds	r3, r7, #7
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80002ba:	d809      	bhi.n	80002d0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002bc:	1dfb      	adds	r3, r7, #7
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	001a      	movs	r2, r3
 80002c2:	231f      	movs	r3, #31
 80002c4:	401a      	ands	r2, r3
 80002c6:	4b04      	ldr	r3, [pc, #16]	@ (80002d8 <__NVIC_EnableIRQ+0x30>)
 80002c8:	2101      	movs	r1, #1
 80002ca:	4091      	lsls	r1, r2
 80002cc:	000a      	movs	r2, r1
 80002ce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80002d0:	46c0      	nop			@ (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b002      	add	sp, #8
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	e000e100 	.word	0xe000e100

080002dc <uart_set_baudrate>:
	//

}

static void uart_set_baudrate(USART_TypeDef * USARTx, uint32_t PeriphClk, uint32_t DesiredBaudRate)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, DesiredBaudRate);
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	0011      	movs	r1, r2
 80002ee:	0018      	movs	r0, r3
 80002f0:	f000 f808 	bl	8000304 <compute_uart_bd>
 80002f4:	0003      	movs	r3, r0
 80002f6:	001a      	movs	r2, r3
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	60da      	str	r2, [r3, #12]
}
 80002fc:	46c0      	nop			@ (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b004      	add	sp, #16
 8000302:	bd80      	pop	{r7, pc}

08000304 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	085a      	lsrs	r2, r3, #1
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	18d3      	adds	r3, r2, r3
 8000316:	6839      	ldr	r1, [r7, #0]
 8000318:	0018      	movs	r0, r3
 800031a:	f7ff feef 	bl	80000fc <__udivsi3>
 800031e:	0003      	movs	r3, r0
 8000320:	b29b      	uxth	r3, r3
}
 8000322:	0018      	movs	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	b002      	add	sp, #8
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <uart2_rxtx_interrupt>:




void uart2_rxtx_interrupt(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	//uart gpio pin
	//enable clock on gpioa
	RCC->IOPENR |= GPIOAEN;
 8000330:	4b39      	ldr	r3, [pc, #228]	@ (8000418 <uart2_rxtx_interrupt+0xec>)
 8000332:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000334:	4b38      	ldr	r3, [pc, #224]	@ (8000418 <uart2_rxtx_interrupt+0xec>)
 8000336:	2101      	movs	r1, #1
 8000338:	430a      	orrs	r2, r1
 800033a:	635a      	str	r2, [r3, #52]	@ 0x34

	//PA2 mode to alternate function mode
	GPIOA->MODER &=~(1U<<4);
 800033c:	23a0      	movs	r3, #160	@ 0xa0
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	23a0      	movs	r3, #160	@ 0xa0
 8000344:	05db      	lsls	r3, r3, #23
 8000346:	2110      	movs	r1, #16
 8000348:	438a      	bics	r2, r1
 800034a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<5);
 800034c:	23a0      	movs	r3, #160	@ 0xa0
 800034e:	05db      	lsls	r3, r3, #23
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	23a0      	movs	r3, #160	@ 0xa0
 8000354:	05db      	lsls	r3, r3, #23
 8000356:	2120      	movs	r1, #32
 8000358:	430a      	orrs	r2, r1
 800035a:	601a      	str	r2, [r3, #0]

	//SetPA2 alt function type to UART_TX (AF01)
	GPIOA->AFR[0] &= ~(0xFU << (2 * 4)); // clear AFRL bits for PA2
 800035c:	23a0      	movs	r3, #160	@ 0xa0
 800035e:	05db      	lsls	r3, r3, #23
 8000360:	6a1a      	ldr	r2, [r3, #32]
 8000362:	23a0      	movs	r3, #160	@ 0xa0
 8000364:	05db      	lsls	r3, r3, #23
 8000366:	492d      	ldr	r1, [pc, #180]	@ (800041c <uart2_rxtx_interrupt+0xf0>)
 8000368:	400a      	ands	r2, r1
 800036a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x1U << (2 * 4)); // AF1 = USART2_TX
 800036c:	23a0      	movs	r3, #160	@ 0xa0
 800036e:	05db      	lsls	r3, r3, #23
 8000370:	6a1a      	ldr	r2, [r3, #32]
 8000372:	23a0      	movs	r3, #160	@ 0xa0
 8000374:	05db      	lsls	r3, r3, #23
 8000376:	2180      	movs	r1, #128	@ 0x80
 8000378:	0049      	lsls	r1, r1, #1
 800037a:	430a      	orrs	r2, r1
 800037c:	621a      	str	r2, [r3, #32]



	//RECEIVE
	GPIOA->MODER &=~(1U<<6);
 800037e:	23a0      	movs	r3, #160	@ 0xa0
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	23a0      	movs	r3, #160	@ 0xa0
 8000386:	05db      	lsls	r3, r3, #23
 8000388:	2140      	movs	r1, #64	@ 0x40
 800038a:	438a      	bics	r2, r1
 800038c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U<<7);
 800038e:	23a0      	movs	r3, #160	@ 0xa0
 8000390:	05db      	lsls	r3, r3, #23
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	23a0      	movs	r3, #160	@ 0xa0
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	2180      	movs	r1, #128	@ 0x80
 800039a:	430a      	orrs	r2, r1
 800039c:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] &= ~(0xFU << (12)); // clear AFRL bits for PA2
 800039e:	23a0      	movs	r3, #160	@ 0xa0
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	6a1a      	ldr	r2, [r3, #32]
 80003a4:	23a0      	movs	r3, #160	@ 0xa0
 80003a6:	05db      	lsls	r3, r3, #23
 80003a8:	491d      	ldr	r1, [pc, #116]	@ (8000420 <uart2_rxtx_interrupt+0xf4>)
 80003aa:	400a      	ands	r2, r1
 80003ac:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x1U << (3 * 4)); // AF1 = USART2_TX
 80003ae:	23a0      	movs	r3, #160	@ 0xa0
 80003b0:	05db      	lsls	r3, r3, #23
 80003b2:	6a1a      	ldr	r2, [r3, #32]
 80003b4:	23a0      	movs	r3, #160	@ 0xa0
 80003b6:	05db      	lsls	r3, r3, #23
 80003b8:	2180      	movs	r1, #128	@ 0x80
 80003ba:	0149      	lsls	r1, r1, #5
 80003bc:	430a      	orrs	r2, r1
 80003be:	621a      	str	r2, [r3, #32]



	//configure UART module
	//enable clock on UART2
	RCC->APBENR1 |= UART2EN;
 80003c0:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <uart2_rxtx_interrupt+0xec>)
 80003c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80003c4:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <uart2_rxtx_interrupt+0xec>)
 80003c6:	2180      	movs	r1, #128	@ 0x80
 80003c8:	0289      	lsls	r1, r1, #10
 80003ca:	430a      	orrs	r2, r1
 80003cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	//consigure BAUD rate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80003ce:	23e1      	movs	r3, #225	@ 0xe1
 80003d0:	025b      	lsls	r3, r3, #9
 80003d2:	4914      	ldr	r1, [pc, #80]	@ (8000424 <uart2_rxtx_interrupt+0xf8>)
 80003d4:	4814      	ldr	r0, [pc, #80]	@ (8000428 <uart2_rxtx_interrupt+0xfc>)
 80003d6:	001a      	movs	r2, r3
 80003d8:	f7ff ff80 	bl	80002dc <uart_set_baudrate>
	//USART2->BRR =  (2 * 48000000)/921600;
	//config transfer direction -> enable receiver
	USART2->CR1 = 0x0;
 80003dc:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <uart2_rxtx_interrupt+0xfc>)
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
	USART2->CR1 = (CR1_TE | CR1_RE);
 80003e2:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <uart2_rxtx_interrupt+0xfc>)
 80003e4:	220c      	movs	r2, #12
 80003e6:	601a      	str	r2, [r3, #0]
	USART2->CR1 &= ~CR_FIFOEN;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000428 <uart2_rxtx_interrupt+0xfc>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <uart2_rxtx_interrupt+0xfc>)
 80003ee:	490f      	ldr	r1, [pc, #60]	@ (800042c <uart2_rxtx_interrupt+0x100>)
 80003f0:	400a      	ands	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]

	//USART2->CR1 |= CR1_RXNEIE; //enable interrupt
	USART2->CR1 |= CR1_RXNEIE | CR1_TE;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <uart2_rxtx_interrupt+0xfc>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000428 <uart2_rxtx_interrupt+0xfc>)
 80003fa:	2128      	movs	r1, #40	@ 0x28
 80003fc:	430a      	orrs	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
	//enable UART2 interrupt in NVIC
	NVIC_EnableIRQ(USART2_IRQn);
 8000400:	201c      	movs	r0, #28
 8000402:	f7ff ff51 	bl	80002a8 <__NVIC_EnableIRQ>

	//enable uArt module
	USART2->CR1 |= CR1_UE;
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <uart2_rxtx_interrupt+0xfc>)
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	4b07      	ldr	r3, [pc, #28]	@ (8000428 <uart2_rxtx_interrupt+0xfc>)
 800040c:	2101      	movs	r1, #1
 800040e:	430a      	orrs	r2, r1
 8000410:	601a      	str	r2, [r3, #0]


}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	fffff0ff 	.word	0xfffff0ff
 8000420:	ffff0fff 	.word	0xffff0fff
 8000424:	00b71b00 	.word	0x00b71b00
 8000428:	40004400 	.word	0x40004400
 800042c:	dfffffff 	.word	0xdfffffff

08000430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000430:	480d      	ldr	r0, [pc, #52]	@ (8000468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000434:	e000      	b.n	8000438 <Reset_Handler+0x8>
 8000436:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480c      	ldr	r0, [pc, #48]	@ (800046c <LoopForever+0x6>)
  ldr r1, =_edata
 800043a:	490d      	ldr	r1, [pc, #52]	@ (8000470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800043c:	4a0d      	ldr	r2, [pc, #52]	@ (8000474 <LoopForever+0xe>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000450:	4c0a      	ldr	r4, [pc, #40]	@ (800047c <LoopForever+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800045e:	f000 f811 	bl	8000484 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000462:	f7ff fed7 	bl	8000214 <main>

08000466 <LoopForever>:

LoopForever:
  b LoopForever
 8000466:	e7fe      	b.n	8000466 <LoopForever>
  ldr   r0, =_estack
 8000468:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800046c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000470:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000474:	080004ec 	.word	0x080004ec
  ldr r2, =_sbss
 8000478:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800047c:	20000020 	.word	0x20000020

08000480 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC_IRQHandler>
	...

08000484 <__libc_init_array>:
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	2600      	movs	r6, #0
 8000488:	4c0c      	ldr	r4, [pc, #48]	@ (80004bc <__libc_init_array+0x38>)
 800048a:	4d0d      	ldr	r5, [pc, #52]	@ (80004c0 <__libc_init_array+0x3c>)
 800048c:	1b64      	subs	r4, r4, r5
 800048e:	10a4      	asrs	r4, r4, #2
 8000490:	42a6      	cmp	r6, r4
 8000492:	d109      	bne.n	80004a8 <__libc_init_array+0x24>
 8000494:	2600      	movs	r6, #0
 8000496:	f000 f819 	bl	80004cc <_init>
 800049a:	4c0a      	ldr	r4, [pc, #40]	@ (80004c4 <__libc_init_array+0x40>)
 800049c:	4d0a      	ldr	r5, [pc, #40]	@ (80004c8 <__libc_init_array+0x44>)
 800049e:	1b64      	subs	r4, r4, r5
 80004a0:	10a4      	asrs	r4, r4, #2
 80004a2:	42a6      	cmp	r6, r4
 80004a4:	d105      	bne.n	80004b2 <__libc_init_array+0x2e>
 80004a6:	bd70      	pop	{r4, r5, r6, pc}
 80004a8:	00b3      	lsls	r3, r6, #2
 80004aa:	58eb      	ldr	r3, [r5, r3]
 80004ac:	4798      	blx	r3
 80004ae:	3601      	adds	r6, #1
 80004b0:	e7ee      	b.n	8000490 <__libc_init_array+0xc>
 80004b2:	00b3      	lsls	r3, r6, #2
 80004b4:	58eb      	ldr	r3, [r5, r3]
 80004b6:	4798      	blx	r3
 80004b8:	3601      	adds	r6, #1
 80004ba:	e7f2      	b.n	80004a2 <__libc_init_array+0x1e>
 80004bc:	080004e4 	.word	0x080004e4
 80004c0:	080004e4 	.word	0x080004e4
 80004c4:	080004e8 	.word	0x080004e8
 80004c8:	080004e4 	.word	0x080004e4

080004cc <_init>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d2:	bc08      	pop	{r3}
 80004d4:	469e      	mov	lr, r3
 80004d6:	4770      	bx	lr

080004d8 <_fini>:
 80004d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004de:	bc08      	pop	{r3}
 80004e0:	469e      	mov	lr, r3
 80004e2:	4770      	bx	lr
