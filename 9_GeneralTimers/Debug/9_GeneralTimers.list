
9_GeneralTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ac  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000260  08000268  00001268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000260  08000260  00001268  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000260  08000260  00001268  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000260  08000268  00001268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000260  08000260  00001260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000264  08000264  00001264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000268  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000268  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004aa  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000135  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00001870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000046  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000d99  00000000  00000000  00001926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d8e  00000000  00000000  000026bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003fbc6  00000000  00000000  0000344d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00043013  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a0  00000000  00000000  00043058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000430f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000000 	.word	0x20000000
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08000248 	.word	0x08000248

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000004 	.word	0x20000004
 80000f8:	08000248 	.word	0x08000248

080000fc <main>:
#include "systick.h"



int main(void)
{
 80000fc:	b580      	push	{r7, lr}
 80000fe:	af00      	add	r7, sp, #0


	tim1_output_compare();
 8000100:	f000 f802 	bl	8000108 <tim1_output_compare>

	while(1)
 8000104:	46c0      	nop			@ (mov r8, r8)
 8000106:	e7fd      	b.n	8000104 <main+0x8>

08000108 <tim1_output_compare>:

}


void tim1_output_compare(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0

	RCC->IOPENR |= GPIOAEN;
 800010c:	4b22      	ldr	r3, [pc, #136]	@ (8000198 <tim1_output_compare+0x90>)
 800010e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000110:	4b21      	ldr	r3, [pc, #132]	@ (8000198 <tim1_output_compare+0x90>)
 8000112:	2101      	movs	r1, #1
 8000114:	430a      	orrs	r2, r1
 8000116:	635a      	str	r2, [r3, #52]	@ 0x34
	//PA5 to AF moder
	//GPIOA->MODER &= ~(3U << (5*2));  // clear mode
	//GPIOA->MODER |=  (2U << (5*2));  // alternate function
	GPIOA->MODER &= ~(1U << 10);
 8000118:	23a0      	movs	r3, #160	@ 0xa0
 800011a:	05db      	lsls	r3, r3, #23
 800011c:	681a      	ldr	r2, [r3, #0]
 800011e:	23a0      	movs	r3, #160	@ 0xa0
 8000120:	05db      	lsls	r3, r3, #23
 8000122:	491e      	ldr	r1, [pc, #120]	@ (800019c <tim1_output_compare+0x94>)
 8000124:	400a      	ands	r2, r1
 8000126:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1U << 11);
 8000128:	23a0      	movs	r3, #160	@ 0xa0
 800012a:	05db      	lsls	r3, r3, #23
 800012c:	681a      	ldr	r2, [r3, #0]
 800012e:	23a0      	movs	r3, #160	@ 0xa0
 8000130:	05db      	lsls	r3, r3, #23
 8000132:	2180      	movs	r1, #128	@ 0x80
 8000134:	0109      	lsls	r1, r1, #4
 8000136:	430a      	orrs	r2, r1
 8000138:	601a      	str	r2, [r3, #0]

	//GPIOA->AFR[0] &= ~(0xFU << (5*4));
	//GPIOA->AFR[0] |=  (2U  << (5*4)); // AF2 = TIM1_CH1

	//set PA5 to alternate function mode 5
	GPIOA->AFR[0] |= AFR5_TIM1_CH1;
 800013a:	23a0      	movs	r3, #160	@ 0xa0
 800013c:	05db      	lsls	r3, r3, #23
 800013e:	6a1a      	ldr	r2, [r3, #32]
 8000140:	23a0      	movs	r3, #160	@ 0xa0
 8000142:	05db      	lsls	r3, r3, #23
 8000144:	21a0      	movs	r1, #160	@ 0xa0
 8000146:	03c9      	lsls	r1, r1, #15
 8000148:	430a      	orrs	r2, r1
 800014a:	621a      	str	r2, [r3, #32]

	//enable clock to timer 1
	RCC->APBENR2 |= TIM1EN;
 800014c:	4b12      	ldr	r3, [pc, #72]	@ (8000198 <tim1_output_compare+0x90>)
 800014e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000150:	4b11      	ldr	r3, [pc, #68]	@ (8000198 <tim1_output_compare+0x90>)
 8000152:	2180      	movs	r1, #128	@ 0x80
 8000154:	0109      	lsls	r1, r1, #4
 8000156:	430a      	orrs	r2, r1
 8000158:	641a      	str	r2, [r3, #64]	@ 0x40

	//set prescaler
	TIM1->PSC = 1600 - 1;
 800015a:	4b11      	ldr	r3, [pc, #68]	@ (80001a0 <tim1_output_compare+0x98>)
 800015c:	4a11      	ldr	r2, [pc, #68]	@ (80001a4 <tim1_output_compare+0x9c>)
 800015e:	629a      	str	r2, [r3, #40]	@ 0x28


	// set auto reaload
	TIM1->ARR = 10000 -1;
 8000160:	4b0f      	ldr	r3, [pc, #60]	@ (80001a0 <tim1_output_compare+0x98>)
 8000162:	4a11      	ldr	r2, [pc, #68]	@ (80001a8 <tim1_output_compare+0xa0>)
 8000164:	62da      	str	r2, [r3, #44]	@ 0x2c


	//set output compare to toggle mode
	TIM1->CCMR1 = OC_TOGGLE;
 8000166:	4b0e      	ldr	r3, [pc, #56]	@ (80001a0 <tim1_output_compare+0x98>)
 8000168:	2230      	movs	r2, #48	@ 0x30
 800016a:	619a      	str	r2, [r3, #24]
	//TIM1->CCMR1 &= ~(0x7U << 4);
	//TIM1->CCMR1 |=  (0x3U << 4);  // OC1M = 0b011 = toggle on match

	//enable tim1 ch1 in compare mode
	TIM1->CCER |= CCER_OC_CC1E;
 800016c:	4b0c      	ldr	r3, [pc, #48]	@ (80001a0 <tim1_output_compare+0x98>)
 800016e:	6a1a      	ldr	r2, [r3, #32]
 8000170:	4b0b      	ldr	r3, [pc, #44]	@ (80001a0 <tim1_output_compare+0x98>)
 8000172:	2101      	movs	r1, #1
 8000174:	430a      	orrs	r2, r1
 8000176:	621a      	str	r2, [r3, #32]




	//clear counter
	TIM1->CNT = 0;
 8000178:	4b09      	ldr	r3, [pc, #36]	@ (80001a0 <tim1_output_compare+0x98>)
 800017a:	2200      	movs	r2, #0
 800017c:	625a      	str	r2, [r3, #36]	@ 0x24


	TIM1->CR1 = CR1_CEN;
 800017e:	4b08      	ldr	r3, [pc, #32]	@ (80001a0 <tim1_output_compare+0x98>)
 8000180:	2201      	movs	r2, #1
 8000182:	601a      	str	r2, [r3, #0]
	TIM1->BDTR |= TIM_BDTR_MOE; // main output enable (needed for TIM1 advanced timer)
 8000184:	4b06      	ldr	r3, [pc, #24]	@ (80001a0 <tim1_output_compare+0x98>)
 8000186:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000188:	4b05      	ldr	r3, [pc, #20]	@ (80001a0 <tim1_output_compare+0x98>)
 800018a:	2180      	movs	r1, #128	@ 0x80
 800018c:	0209      	lsls	r1, r1, #8
 800018e:	430a      	orrs	r2, r1
 8000190:	645a      	str	r2, [r3, #68]	@ 0x44

}
 8000192:	46c0      	nop			@ (mov r8, r8)
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	40021000 	.word	0x40021000
 800019c:	fffffbff 	.word	0xfffffbff
 80001a0:	40012c00 	.word	0x40012c00
 80001a4:	0000063f 	.word	0x0000063f
 80001a8:	0000270f 	.word	0x0000270f

080001ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001ac:	480d      	ldr	r0, [pc, #52]	@ (80001e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001b0:	e000      	b.n	80001b4 <Reset_Handler+0x8>
 80001b2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001b4:	480c      	ldr	r0, [pc, #48]	@ (80001e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80001b6:	490d      	ldr	r1, [pc, #52]	@ (80001ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80001b8:	4a0d      	ldr	r2, [pc, #52]	@ (80001f0 <LoopForever+0xe>)
  movs r3, #0
 80001ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001bc:	e002      	b.n	80001c4 <LoopCopyDataInit>

080001be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001c2:	3304      	adds	r3, #4

080001c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001c8:	d3f9      	bcc.n	80001be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ca:	4a0a      	ldr	r2, [pc, #40]	@ (80001f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001cc:	4c0a      	ldr	r4, [pc, #40]	@ (80001f8 <LoopForever+0x16>)
  movs r3, #0
 80001ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001d0:	e001      	b.n	80001d6 <LoopFillZerobss>

080001d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001d4:	3204      	adds	r2, #4

080001d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001d8:	d3fb      	bcc.n	80001d2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80001da:	f000 f811 	bl	8000200 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80001de:	f7ff ff8d 	bl	80000fc <main>

080001e2 <LoopForever>:

LoopForever:
  b LoopForever
 80001e2:	e7fe      	b.n	80001e2 <LoopForever>
  ldr   r0, =_estack
 80001e4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80001e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001f0:	08000268 	.word	0x08000268
  ldr r2, =_sbss
 80001f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001f8:	2000001c 	.word	0x2000001c

080001fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001fc:	e7fe      	b.n	80001fc <ADC_IRQHandler>
	...

08000200 <__libc_init_array>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	2600      	movs	r6, #0
 8000204:	4c0c      	ldr	r4, [pc, #48]	@ (8000238 <__libc_init_array+0x38>)
 8000206:	4d0d      	ldr	r5, [pc, #52]	@ (800023c <__libc_init_array+0x3c>)
 8000208:	1b64      	subs	r4, r4, r5
 800020a:	10a4      	asrs	r4, r4, #2
 800020c:	42a6      	cmp	r6, r4
 800020e:	d109      	bne.n	8000224 <__libc_init_array+0x24>
 8000210:	2600      	movs	r6, #0
 8000212:	f000 f819 	bl	8000248 <_init>
 8000216:	4c0a      	ldr	r4, [pc, #40]	@ (8000240 <__libc_init_array+0x40>)
 8000218:	4d0a      	ldr	r5, [pc, #40]	@ (8000244 <__libc_init_array+0x44>)
 800021a:	1b64      	subs	r4, r4, r5
 800021c:	10a4      	asrs	r4, r4, #2
 800021e:	42a6      	cmp	r6, r4
 8000220:	d105      	bne.n	800022e <__libc_init_array+0x2e>
 8000222:	bd70      	pop	{r4, r5, r6, pc}
 8000224:	00b3      	lsls	r3, r6, #2
 8000226:	58eb      	ldr	r3, [r5, r3]
 8000228:	4798      	blx	r3
 800022a:	3601      	adds	r6, #1
 800022c:	e7ee      	b.n	800020c <__libc_init_array+0xc>
 800022e:	00b3      	lsls	r3, r6, #2
 8000230:	58eb      	ldr	r3, [r5, r3]
 8000232:	4798      	blx	r3
 8000234:	3601      	adds	r6, #1
 8000236:	e7f2      	b.n	800021e <__libc_init_array+0x1e>
 8000238:	08000260 	.word	0x08000260
 800023c:	08000260 	.word	0x08000260
 8000240:	08000264 	.word	0x08000264
 8000244:	08000260 	.word	0x08000260

08000248 <_init>:
 8000248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800024a:	46c0      	nop			@ (mov r8, r8)
 800024c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800024e:	bc08      	pop	{r3}
 8000250:	469e      	mov	lr, r3
 8000252:	4770      	bx	lr

08000254 <_fini>:
 8000254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800025a:	bc08      	pop	{r3}
 800025c:	469e      	mov	lr, r3
 800025e:	4770      	bx	lr
