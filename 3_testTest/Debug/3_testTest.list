
3_testTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a4  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000258  08000260  00001260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000258  08000258  00001260  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000258  08000258  00001260  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000258  08000260  00001260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800025c  0800025c  0000125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000260  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000260  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003e6  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000012a  00000000  00000000  0000166e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00001798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000039  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ab94  00000000  00000000  00001829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000062d  00000000  00000000  0000c3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003c0d4  00000000  00000000  0000c9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00048abe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000098  00000000  00000000  00048b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00048b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000000 	.word	0x20000000
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08000240 	.word	0x08000240

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000004 	.word	0x20000004
 80000f8:	08000240 	.word	0x08000240

080000fc <main>:
static void uart_set_baudrate(USART_TypeDef * USARTx, uint32_t PeriphClk, uint32_t DesiredBaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);


int main(void)
{
 80000fc:	b580      	push	{r7, lr}
 80000fe:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;   // Enable GPIOA clock
 8000100:	4b24      	ldr	r3, [pc, #144]	@ (8000194 <main+0x98>)
 8000102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000104:	4b23      	ldr	r3, [pc, #140]	@ (8000194 <main+0x98>)
 8000106:	2101      	movs	r1, #1
 8000108:	430a      	orrs	r2, r1
 800010a:	635a      	str	r2, [r3, #52]	@ 0x34
	RCC->APBENR1 |= RCC_APBENR1_USART2EN; // Enable USART2 clock
 800010c:	4b21      	ldr	r3, [pc, #132]	@ (8000194 <main+0x98>)
 800010e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000110:	4b20      	ldr	r3, [pc, #128]	@ (8000194 <main+0x98>)
 8000112:	2180      	movs	r1, #128	@ 0x80
 8000114:	0289      	lsls	r1, r1, #10
 8000116:	430a      	orrs	r2, r1
 8000118:	63da      	str	r2, [r3, #60]	@ 0x3c

	// 2. Configure PA2 as AF1 (USART2_TX)
	GPIOA->MODER &= ~(3U << (2 * 2));   // Clear mode bits for PA2
 800011a:	23a0      	movs	r3, #160	@ 0xa0
 800011c:	05db      	lsls	r3, r3, #23
 800011e:	681a      	ldr	r2, [r3, #0]
 8000120:	23a0      	movs	r3, #160	@ 0xa0
 8000122:	05db      	lsls	r3, r3, #23
 8000124:	2130      	movs	r1, #48	@ 0x30
 8000126:	438a      	bics	r2, r1
 8000128:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |=  (2U << (2 * 2));   // Alternate function mode
 800012a:	23a0      	movs	r3, #160	@ 0xa0
 800012c:	05db      	lsls	r3, r3, #23
 800012e:	681a      	ldr	r2, [r3, #0]
 8000130:	23a0      	movs	r3, #160	@ 0xa0
 8000132:	05db      	lsls	r3, r3, #23
 8000134:	2120      	movs	r1, #32
 8000136:	430a      	orrs	r2, r1
 8000138:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] &= ~(0xFU << (2 * 4));
 800013a:	23a0      	movs	r3, #160	@ 0xa0
 800013c:	05db      	lsls	r3, r3, #23
 800013e:	6a1a      	ldr	r2, [r3, #32]
 8000140:	23a0      	movs	r3, #160	@ 0xa0
 8000142:	05db      	lsls	r3, r3, #23
 8000144:	4914      	ldr	r1, [pc, #80]	@ (8000198 <main+0x9c>)
 8000146:	400a      	ands	r2, r1
 8000148:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (1U << (2 * 4));  // AF1 = USART2_TX
 800014a:	23a0      	movs	r3, #160	@ 0xa0
 800014c:	05db      	lsls	r3, r3, #23
 800014e:	6a1a      	ldr	r2, [r3, #32]
 8000150:	23a0      	movs	r3, #160	@ 0xa0
 8000152:	05db      	lsls	r3, r3, #23
 8000154:	2180      	movs	r1, #128	@ 0x80
 8000156:	0049      	lsls	r1, r1, #1
 8000158:	430a      	orrs	r2, r1
 800015a:	621a      	str	r2, [r3, #32]

	// 3. Configure USART2
	USART2->CR1 = 0x0; // Disable before config
 800015c:	4b0f      	ldr	r3, [pc, #60]	@ (800019c <main+0xa0>)
 800015e:	2200      	movs	r2, #0
 8000160:	601a      	str	r2, [r3, #0]
	USART2->BRR = 16000000 / 9600; // Baudrate 9600 @ 16 MHz HSI
 8000162:	4b0e      	ldr	r3, [pc, #56]	@ (800019c <main+0xa0>)
 8000164:	4a0e      	ldr	r2, [pc, #56]	@ (80001a0 <main+0xa4>)
 8000166:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_TE;   // Enable transmitter
 8000168:	4b0c      	ldr	r3, [pc, #48]	@ (800019c <main+0xa0>)
 800016a:	681a      	ldr	r2, [r3, #0]
 800016c:	4b0b      	ldr	r3, [pc, #44]	@ (800019c <main+0xa0>)
 800016e:	2108      	movs	r1, #8
 8000170:	430a      	orrs	r2, r1
 8000172:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= USART_CR1_UE;   // Enable USART
 8000174:	4b09      	ldr	r3, [pc, #36]	@ (800019c <main+0xa0>)
 8000176:	681a      	ldr	r2, [r3, #0]
 8000178:	4b08      	ldr	r3, [pc, #32]	@ (800019c <main+0xa0>)
 800017a:	2101      	movs	r1, #1
 800017c:	430a      	orrs	r2, r1
 800017e:	601a      	str	r2, [r3, #0]



    while (1)
    {
    	while (!(USART2->ISR & USART_ISR_TXE_TXFNF)){}; // Wait until TX ready
 8000180:	46c0      	nop			@ (mov r8, r8)
 8000182:	4b06      	ldr	r3, [pc, #24]	@ (800019c <main+0xa0>)
 8000184:	69db      	ldr	r3, [r3, #28]
 8000186:	2280      	movs	r2, #128	@ 0x80
 8000188:	4013      	ands	r3, r2
 800018a:	d0fa      	beq.n	8000182 <main+0x86>
    	//while(!(USART2->ISR & SR_TXE)){};

    	USART2->TDR = 'A';
 800018c:	4b03      	ldr	r3, [pc, #12]	@ (800019c <main+0xa0>)
 800018e:	2241      	movs	r2, #65	@ 0x41
 8000190:	629a      	str	r2, [r3, #40]	@ 0x28
    	while (!(USART2->ISR & USART_ISR_TXE_TXFNF)){}; // Wait until TX ready
 8000192:	e7f5      	b.n	8000180 <main+0x84>
 8000194:	40021000 	.word	0x40021000
 8000198:	fffff0ff 	.word	0xfffff0ff
 800019c:	40004400 	.word	0x40004400
 80001a0:	00000682 	.word	0x00000682

080001a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001a4:	480d      	ldr	r0, [pc, #52]	@ (80001dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001a8:	e000      	b.n	80001ac <Reset_Handler+0x8>
 80001aa:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001ac:	480c      	ldr	r0, [pc, #48]	@ (80001e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80001ae:	490d      	ldr	r1, [pc, #52]	@ (80001e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001b0:	4a0d      	ldr	r2, [pc, #52]	@ (80001e8 <LoopForever+0xe>)
  movs r3, #0
 80001b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001b4:	e002      	b.n	80001bc <LoopCopyDataInit>

080001b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ba:	3304      	adds	r3, #4

080001bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001c0:	d3f9      	bcc.n	80001b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001c2:	4a0a      	ldr	r2, [pc, #40]	@ (80001ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80001c4:	4c0a      	ldr	r4, [pc, #40]	@ (80001f0 <LoopForever+0x16>)
  movs r3, #0
 80001c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001c8:	e001      	b.n	80001ce <LoopFillZerobss>

080001ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001cc:	3204      	adds	r2, #4

080001ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001d0:	d3fb      	bcc.n	80001ca <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80001d2:	f000 f811 	bl	80001f8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80001d6:	f7ff ff91 	bl	80000fc <main>

080001da <LoopForever>:

LoopForever:
  b LoopForever
 80001da:	e7fe      	b.n	80001da <LoopForever>
  ldr   r0, =_estack
 80001dc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80001e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001e8:	08000260 	.word	0x08000260
  ldr r2, =_sbss
 80001ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001f0:	2000001c 	.word	0x2000001c

080001f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001f4:	e7fe      	b.n	80001f4 <ADC_IRQHandler>
	...

080001f8 <__libc_init_array>:
 80001f8:	b570      	push	{r4, r5, r6, lr}
 80001fa:	2600      	movs	r6, #0
 80001fc:	4c0c      	ldr	r4, [pc, #48]	@ (8000230 <__libc_init_array+0x38>)
 80001fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000234 <__libc_init_array+0x3c>)
 8000200:	1b64      	subs	r4, r4, r5
 8000202:	10a4      	asrs	r4, r4, #2
 8000204:	42a6      	cmp	r6, r4
 8000206:	d109      	bne.n	800021c <__libc_init_array+0x24>
 8000208:	2600      	movs	r6, #0
 800020a:	f000 f819 	bl	8000240 <_init>
 800020e:	4c0a      	ldr	r4, [pc, #40]	@ (8000238 <__libc_init_array+0x40>)
 8000210:	4d0a      	ldr	r5, [pc, #40]	@ (800023c <__libc_init_array+0x44>)
 8000212:	1b64      	subs	r4, r4, r5
 8000214:	10a4      	asrs	r4, r4, #2
 8000216:	42a6      	cmp	r6, r4
 8000218:	d105      	bne.n	8000226 <__libc_init_array+0x2e>
 800021a:	bd70      	pop	{r4, r5, r6, pc}
 800021c:	00b3      	lsls	r3, r6, #2
 800021e:	58eb      	ldr	r3, [r5, r3]
 8000220:	4798      	blx	r3
 8000222:	3601      	adds	r6, #1
 8000224:	e7ee      	b.n	8000204 <__libc_init_array+0xc>
 8000226:	00b3      	lsls	r3, r6, #2
 8000228:	58eb      	ldr	r3, [r5, r3]
 800022a:	4798      	blx	r3
 800022c:	3601      	adds	r6, #1
 800022e:	e7f2      	b.n	8000216 <__libc_init_array+0x1e>
 8000230:	08000258 	.word	0x08000258
 8000234:	08000258 	.word	0x08000258
 8000238:	0800025c 	.word	0x0800025c
 800023c:	08000258 	.word	0x08000258

08000240 <_init>:
 8000240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000246:	bc08      	pop	{r3}
 8000248:	469e      	mov	lr, r3
 800024a:	4770      	bx	lr

0800024c <_fini>:
 800024c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800024e:	46c0      	nop			@ (mov r8, r8)
 8000250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000252:	bc08      	pop	{r3}
 8000254:	469e      	mov	lr, r3
 8000256:	4770      	bx	lr
